@using LegalCaseManagementSystem_FrontEnd.Services
@inject DashboardState DashboardState

<div class="activity-card @(DashboardState.IsDarkMode ? "dark-mode" : "")">
    <div class="card-header">
        <h3>Recent Activity</h3>
    </div>
    <div class="activity-list">
        @if (DashboardState.IsLoading)
        {
            <div class="text-center py-3">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (DashboardState.ErrorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @DashboardState.ErrorMessage
            </div>
        }
        else
        {
            @foreach (var activity in DashboardState.RecentActivities)
            {
                <div class="activity-item">
                    <div class="activity-icon">
                        <i class="@activity.Icon"></i>
                    </div>
                    <div class="activity-content">
                        <p>@activity.Description</p>
                        <small class="text-muted">@FormatDate(activity.Timestamp)</small>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public Func<DateTime, string> FormatDate { get; set; } = date =>
    {
        var timeSince = DateTime.Now - date;
        if (timeSince.TotalDays >= 1)
            return $"{(int)timeSince.TotalDays}d ago";
        if (timeSince.TotalHours >= 1)
            return $"{(int)timeSince.TotalHours}h ago";
        return $"{(int)timeSince.TotalMinutes}m ago";
    };

    protected override void OnInitialized()
    {
        DashboardState.OnChange += StateHasChanged;
    }
}