@page "/cases"
@page "/cases/{caseId:int}"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using LegalCaseManagementSystem_FrontEnd.Models

<!-- Dashboard Container -->
<div class="dashboard @(isDarkMode ? "dark-mode" : "")">
    <!-- Header -->
    <header class="dashboard-header">
        <div class="header-left">
            <h1>My Cases <span class="badge">PRO</span></h1>
            <p class="text-muted">Manage your assigned cases</p>
        </div>
        <div class="header-right">
            <button class="btn btn-icon" @onclick="ToggleDarkMode">
                <i class="fas @(isDarkMode ? "fa-sun" : "fa-moon")"></i>
            </button>
            <div class="user-dropdown">
                <img src="https://ui-avatars.com/api/?name=Lawyer&background=4e73df&color=fff" class="user-avatar" />
                <div class="dropdown-content">
                    <a href="#"><i class="fas fa-user"></i> Profile</a>
                    <a href="#"><i class="fas fa-cog"></i> Settings</a>
                    <a href="#"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <div class="dashboard-grid">
        @if (!caseId.HasValue)
        {
            <!-- My Cases List -->
            <div class="content-grid">
                <div class="management-actions mb-4">
                    <div class="row align-items-center">
                        <div class="col-md-4 mb-3 mb-md-0">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Search cases..." @bind="searchTerm" @bind:event="oninput" />
                            </div>
                        </div>
                        <div class="col-md-4 mb-3 mb-md-0">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-filter"></i>
                                </span>
                                <select class="form-select" @bind="selectedStatus">
                                    <option value="">All</option>
                                    <option value="Open">Open</option>
                                    <option value="Pending">Pending</option>
                                    <option value="Closed">Closed</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (errorMessage != null)
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-dark table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">Case ID</th>
                                    <th scope="col">Title</th>
                                    <th scope="col">Description</th>
                                    <th scope="col">Status</th>
                                    <th scope="col">Start Date</th>
                                    <th scope="col">Client</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var caseItem in FilteredCases)
                                {
                                    <tr>
                                        <td>@caseItem.CaseId</td>
                                        <td>@caseItem.Title</td>
                                        <td>@caseItem.Description</td>
                                        <td>
                                            <span class="badge @(GetStatusBadgeClass(caseItem.Status))">
                                                @caseItem.Status
                                            </span>
                                        </td>
                                        <td>@caseItem.StartDate.ToString("g")</td>
                                        <td>@(caseItem.Client?.FullName ?? caseItem.ClientId.ToString())</td>
                                        <td>
                                            <button class="btn btn-primary btn-sm" @onclick="() => ViewCase(caseItem.CaseId)" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }
        else if (caseDetails != null)
        {
            <!-- Case Detail -->
            <div class="content-grid">
                <div class="case-detail-card">
                    <div class="card-header">
                        <h3>@caseDetails.Title</h3>
                        <p class="text-muted">@caseDetails.Description</p>
                        <span class="badge @(GetStatusBadgeClass(caseDetails.Status))">
                            @caseDetails.Status
                        </span>
                        <div class="case-actions">
                            <button class="btn btn-primary" @onclick="GoBack">
                                <i class="fas fa-arrow-left"></i> Back to Cases
                            </button>
                            <button class="btn btn-outline-primary" @onclick="() => EditCase(caseDetails.CaseId)">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link @(activeTab == "CaseInfo" ? "active" : "")" @onclick="@(() => SetActiveTab("CaseInfo"))" role="tab">Case Info</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(activeTab == "ClientInfo" ? "active" : "")" @onclick="@(() => SetActiveTab("ClientInfo"))" role="tab">Client Info</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(activeTab == "LawyerInfo" ? "active" : "")" @onclick="@(() => SetActiveTab("LawyerInfo"))" role="tab">Lawyer Info</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(activeTab == "Tasks" ? "active" : "")" @onclick="@(() => SetActiveTab("Tasks"))" role="tab">Tasks</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(activeTab == "Hearings" ? "active" : "")" @onclick="@(() => SetActiveTab("Hearings"))" role="tab">Hearings</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @(activeTab == "Documents" ? "active" : "")" @onclick="@(() => SetActiveTab("Documents"))" role="tab">Documents</a>
                            </li>
                        </ul>
                        <div class="tab-content mt-3">
                            @if (activeTab == "CaseInfo")
                            {
                                <div class="case-info">
                                    <h4>Case Information</h4>
                                    <p><strong>Case ID:</strong> @caseDetails.CaseId</p>
                                    <p><strong>Description:</strong> @caseDetails.Description</p>
                                    <p><strong>Start Date:</strong> @caseDetails.StartDate.ToString("dd MMM yyyy")</p>
                                    <p><strong>End Date:</strong> @(caseDetails.EndDate?.ToString("dd MMM yyyy") ?? "Ongoing")</p>
                                </div>
                            }
                            else if (activeTab == "ClientInfo")
                            {
                                <div class="client-info">
                                    <h4>Client Information</h4>
                                    @if (caseDetails.Client != null)
                                    {
                                        <p><strong>Name:</strong> @caseDetails.Client.FullName</p>
                                        <p><strong>Contact:</strong> @caseDetails.Client.ContactInfo</p>
                                    }
                                    else
                                    {
                                        <p>No client assigned.</p>
                                    }
                                </div>
                            }
                            else if (activeTab == "LawyerInfo")
                            {
                                <div class="lawyer-info">
                                    <h4>Lawyer Information</h4>
                                    @if (caseDetails.Lawyer != null)
                                    {
                                        <p><strong>Name:</strong> @caseDetails.Lawyer.FullName</p>
                                        <p><strong>Specialization:</strong> @caseDetails.Lawyer.Specialization</p>
                                    }
                                    else
                                    {
                                        <p>No lawyer assigned.</p>
                                    }
                                </div>
                            }
                            else if (activeTab == "Tasks")
                            {
                                <div class="tasks-list">
                                    <h4>Tasks</h4>
                                    <button class="btn btn-sm btn-primary mb-3" @onclick="AddNewTask">
                                        <i class="fas fa-plus"></i> Add Task
                                    </button>
                                    @if (caseDetails.CaseTasks?.Any() == true)
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-dark table-striped table-hover">
                                                <thead>
                                                    <tr>
                                                        <th>Title</th>
                                                        <th>Description</th>
                                                        <th>Status</th>
                                                        <th>Created At</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var task in caseDetails.CaseTasks)
                                                    {
                                                        <tr>
                                                            <td>@task.Title</td>
                                                            <td>@task.Description</td>
                                                            <td>
                                                                <span class="badge @(task.Status == "Completed" ? "badge-success" : "badge-warning")">
                                                                    @task.Status
                                                                </span>
                                                            </td>
                                                            <td>@task.CreatedAt.ToString("dd MMM yyyy")</td>
                                                            <td>
                                                                <button class="btn btn-sm btn-warning" @onclick="() => UpdateTaskStatus(task)">
                                                                    <i class="bi bi-check-circle"></i> Mark as @(task.Status == "Completed" ? "Pending" : "Completed")
                                                                </button>
                                                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditTask(task)">
                                                                    <i class="fas fa-edit"></i> Edit
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <p>No tasks available.</p>
                                    }
                                </div>
                            }
                            else if (activeTab == "Hearings")
                            {
                                <div class="hearings-list">
                                    <h4>Hearings</h4>
                                    <button class="btn btn-sm btn-primary mb-3" @onclick="AddNewHearing">
                                        <i class="fas fa-plus"></i> Schedule Hearing
                                    </button>
                                    @if (caseDetails.Hearings?.Any() == true)
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-dark table-striped table-hover">
                                                <thead>
                                                    <tr>
                                                        <th>Date</th>
                                                        <th>Venue</th>
                                                        <th>Outcome</th>
                                                        <th>Status</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var hearing in caseDetails.Hearings.OrderBy(h => h.HearingDate))
                                                    {
                                                        <tr>
                                                            <td>@hearing.HearingDate.ToString("dd MMM yyyy h:mm tt")</td>
                                                            <td>@hearing.Venue</td>
                                                            <td>@(string.IsNullOrEmpty(hearing.Outcome) ? "N/A" : hearing.Outcome)</td>
                                                            <td>
                                                                <span class="badge @(hearing.HearingDate > DateTime.Now ? "badge-info" : "badge-secondary")">
                                                                    @(hearing.HearingDate > DateTime.Now ? "Upcoming" : "Past")
                                                                </span>
                                                            </td>
                                                            <td>
                                                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditHearing(hearing)">
                                                                    <i class="fas fa-edit"></i> Edit
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <p>No hearings scheduled.</p>
                                    }
                                </div>
                            }
                            else if (activeTab == "Documents")
                            {
                                <div class="documents-list">
                                    <h4>Documents</h4>
                                    <button class="btn btn-sm btn-primary mb-3" @onclick="AddNewDocument">
                                        <i class="fas fa-plus"></i> Upload Document
                                    </button>
                                    @if (caseDetails.Documents?.Any() == true)
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-dark table-striped table-hover">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Uploaded At</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var doc in caseDetails.Documents)
                                                    {
                                                        <tr>
                                                            <td>@doc.Title</td>
                                                            <td>@doc.UploadedAt.ToString("dd MMM yyyy")</td>
                                                            <td>
                                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewDocument(doc)">
                                                                    <i class="fas fa-eye"></i> View
                                                                </button>
                                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => DownloadDocument(doc)">
                                                                    <i class="fas fa-download"></i> Download
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <p>No documents available.</p>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                Case not found.
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int? caseId { get; set; }

    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<Case> cases = new();
    private Case? caseDetails;
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;
    private bool isDarkMode = false;
    private bool isLoading = false;
    private string? errorMessage;
    private string activeTab = "CaseInfo";

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (caseId.HasValue)
        {
            await LoadCaseDetails(caseId.Value);
        }
        else
        {
            await LoadCases();
        }
    }

    private async Task LoadCases()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await Http.GetAsync("/api/Cases?include=client,lawyer");
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {response.StatusCode}";
                return;
            }
            var content = await response.Content.ReadAsStringAsync();
            cases = JsonSerializer.Deserialize<List<Case>>(content, jsonOptions) ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading cases: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCaseDetails(int id)
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Try to fetch with include parameter
            var response = await Http.GetAsync($"/api/Cases/{id}?include=client,lawyer,tasks,hearings,documents");
            if (!response.IsSuccessStatusCode)
            {
                // Fallback to individual API calls if include is not supported
                response = await Http.GetAsync($"/api/Cases/{id}");
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = $"Error loading case details: {response.StatusCode}";
                    caseDetails = null;
                    return;
                }
                var content = await response.Content.ReadAsStringAsync();
                caseDetails = JsonSerializer.Deserialize<Case>(content, jsonOptions);
                if (caseDetails != null)
                {
                    // Load related data separately
                    caseDetails.CaseTasks = await LoadTasks(id);
                    caseDetails.Hearings = await LoadHearings(id);
                    caseDetails.Documents = await LoadDocuments(id);
                    caseDetails.Client = await LoadClient(caseDetails.ClientId);
                    caseDetails.Lawyer = await LoadLawyer(caseDetails.LawyerId);
                }
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                caseDetails = JsonSerializer.Deserialize<Case>(content, jsonOptions);
            }

            if (caseDetails != null)
            {
                caseDetails.CaseTasks ??= new List<CaseTask>();
                caseDetails.Hearings ??= new List<Hearing>();
                caseDetails.Documents ??= new List<Document>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading case details: {ex.Message}";
            caseDetails = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<List<CaseTask>> LoadTasks(int caseId)
    {
        var response = await Http.GetAsync($"/api/cases/{caseId}/CaseTasks");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<List<CaseTask>>(content, jsonOptions) ?? new();
        }
        return new();
    }

    private async Task<List<Hearing>> LoadHearings(int caseId)
    {
        var response = await Http.GetAsync($"/api/cases/{caseId}/Hearings");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<List<Hearing>>(content, jsonOptions) ?? new();
        }
        return new();
    }

    private async Task<List<Document>> LoadDocuments(int caseId)
    {
        var response = await Http.GetAsync($"/api/cases/{caseId}/Documents");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<List<Document>>(content, jsonOptions) ?? new();
        }
        return new();
    }

    private async Task<Client?> LoadClient(int clientId)
    {
        if (clientId == 0) return null;
        var response = await Http.GetAsync($"/api/Clients/{clientId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<Client>(content, jsonOptions);
        }
        return null;
    }

    private async Task<Lawyer?> LoadLawyer(int lawyerId)
    {
        if (lawyerId == 0) return null;
        var response = await Http.GetAsync($"/api/Lawyers/{lawyerId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<Lawyer>(content, jsonOptions);
        }
        return null;
    }

    private List<Case> FilteredCases => cases
        .Where(c => (string.IsNullOrEmpty(selectedStatus) || c.Status.ToString() == selectedStatus) &&
                    (string.IsNullOrEmpty(searchTerm) ||
                     c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     c.Status.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        .ToList();

    private string GetStatusBadgeClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "badge-open",
            CaseStatus.Closed => "badge-closed",
            CaseStatus.Pending => "badge-pending",
            _ => "badge-secondary"
        };
    }

    private void ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        StateHasChanged();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private void ViewCase(int caseId)
    {
        Navigation.NavigateTo($"/cases/{caseId}");
    }

    private async Task UpdateTaskStatus(CaseTask task)
    {
        try
        {
            var updatedTask = new
            {
                Title = task.Title,
                Description = task.Description,
                Status = task.Status == "Completed" ? "Pending" : "Completed"
            };
            var response = await Http.PutAsJsonAsync($"/api/cases/{caseId}/CaseTasks/{task.TaskId}", updatedTask);
            if (response.IsSuccessStatusCode)
            {
                await LoadCaseDetails(caseId!.Value);
            }
            else
            {
                errorMessage = $"Error updating task: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception updating task: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/cases");
    }

    private void EditCase(int caseId)
    {
        Navigation.NavigateTo($"/cases/{caseId}/edit");
    }

    private void AddNewTask()
    {
        Navigation.NavigateTo($"/cases/{caseId}/tasks/new");
    }

    private void EditTask(CaseTask task)
    {
        Navigation.NavigateTo($"/cases/{caseId}/tasks/{task.TaskId}/edit");
    }

    private void AddNewHearing()
    {
        Navigation.NavigateTo($"/cases/{caseId}/hearings/new");
    }

    private void EditHearing(Hearing hearing)
    {
        Navigation.NavigateTo($"/cases/{caseId}/hearings/{hearing.HearingId}/edit");
    }

    private void AddNewDocument()
    {
        Navigation.NavigateTo($"/cases/{caseId}/documents/new");
    }

    private void ViewDocument(Document document)
    {
        JSRuntime.InvokeVoidAsync("alert", "Document viewing not implemented in this demo.");
    }

    private void DownloadDocument(Document document)
    {
        JSRuntime.InvokeVoidAsync("alert", "Document download not implemented in this demo.");
    }
}