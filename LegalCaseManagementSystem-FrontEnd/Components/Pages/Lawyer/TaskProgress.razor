@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services
@inject DashboardState DashboardState
@implements IDisposable

<div class="tasks-card">
    <div class="card-header">
        <h3>Task Progress</h3>
    </div>
    <div class="progress-container">
        <div class="progress-info">
            <span>@CompletedTasksCount/@TotalTasksCount tasks completed</span>
            <span>@CompletionPercentage%</span>
        </div>
        <div class="progress">
            <div class="progress-bar" style="width: @CompletionPercentage%"
                 role="progressbar" aria-valuenow="@CompletionPercentage"
                 aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>
    <div class="task-list">
        <LoadingAndError>
            @foreach (var task in DashboardState.RecentTasks)
            {
                <div class="task-item @(task.Status == "Completed" ? "completed" : "")">
                    <label class="task-checkbox">
                        <input type="checkbox" checked="@(task.Status == "Completed")"
                               @onchange="@(() => OnToggleTaskCompletion.InvokeAsync(task))" />
                        <span class="checkmark"></span>
                    </label>
                    <div class="task-content">
                        <h4>@task.Title</h4>
                        <p>@(task.Description ?? "No description")</p>
                    </div>
                </div>
            }
        </LoadingAndError>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<CaseTask> OnToggleTaskCompletion { get; set; }

    private int CompletedTasksCount => DashboardState.RecentTasks.Count(t => t.Status == "Completed");
    private int TotalTasksCount => DashboardState.RecentTasks.Count;
    private int CompletionPercentage => TotalTasksCount == 0 ? 0 : (int)Math.Round((double)CompletedTasksCount / TotalTasksCount * 100);

    protected override void OnInitialized()
    {
        DashboardState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        DashboardState.OnChange -= StateHasChanged;
    }
}