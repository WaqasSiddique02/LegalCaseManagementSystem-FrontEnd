@page "/lawyer/{LawyerId:int}/cases/{caseId:int}"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject DashboardState DashboardState
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services

<LawyerHeader></LawyerHeader>

<!-- Main Content -->
<div class="dashboard-container">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (caseDetails != null)
    {
        <!-- Dashboard Layout -->
        <div class="dashboard-layout">
            <!-- Case Info Card (Top) -->
            <div class="dashboard-card case-info-card">
                <h4>Case Information</h4>
                <div class="info-row">
                    <span class="info-label">Case ID:</span>
                    <span class="info-value">@caseDetails.CaseId</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Title:</span>
                    <span class="info-value">@caseDetails.Title</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Description:</span>
                    <span class="info-value">@caseDetails.Description</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Start Date:</span>
                    <span class="info-value">@caseDetails.StartDate.ToString("dd MMM yyyy")</span>
                </div>
                <div class="info-row">
                    <span class="info-label">End Date:</span>
                    <span class="info-value">@(caseDetails.EndDate?.ToString("dd MMM yyyy") ?? "Ongoing")</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Status:</span>
                    <span class="badge @(GetStatusBadgeClass(caseDetails.Status))">
                        @GetStatusText(caseDetails.Status)
                    </span>
                </div>
                <div class="case-actions mt-3">
                    <button class="btn btn-primary" @onclick="GoBack">
                        <i class="fas fa-arrow-left"></i> Back to Cases
                    </button>
                </div>
            </div>

            <!-- Tasks Card (Beneath Case Info) -->
            <div class="dashboard-card tasks-card">
                <h4>Tasks</h4>
                @if (caseDetails.CaseTasks?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Description</th>
                                    <th>Status</th>
                                    <th>Created At</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in caseDetails.CaseTasks)
                                {
                                    <tr>
                                        <td>@task.Title</td>
                                        <td>@task.Description</td>
                                        <td>
                                            <span class="badge @(task.Status == "Completed" ? "status-completed" : "status-in-progress")">
                                                @task.Status
                                            </span>
                                        </td>
                                        <td>@task.CreatedAt.ToString("dd MMM yyyy")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p>No tasks available.</p>
                }
            </div>

            <!-- Client and Lawyer Info Row -->
            <div class="info-row-container">
                <!-- Client Info Card -->
                <div class="dashboard-card client-info-card">
                    <h4>Client Information</h4>
                    @if (caseDetails.Client != null)
                    {
                        <div class="info-row">
                            <span class="info-label">Name:</span>
                            <span class="info-value">@caseDetails.Client.FullName</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Contact:</span>
                            <span class="info-value">@caseDetails.Client.ContactInfo</span>
                        </div>
                    }
                    else
                    {
                        <p>No client assigned.</p>
                    }
                </div>

                <!-- Lawyer Info Card -->
                <div class="dashboard-card lawyer-info-card">
                    <h4>Lawyer Information</h4>
                    @if (caseDetails.Lawyer != null)
                    {
                        <div class="info-row">
                            <span class="info-label">Name:</span>
                            <span class="info-value">@caseDetails.Lawyer.FullName</span>
                        </div>
                        <div class="info-row">
                            <span class="info-label">Specialization:</span>
                            <span class="info-value">@caseDetails.Lawyer.Specialization</span>
                        </div>
                    }
                    else
                    {
                        <p>No lawyer assigned.</p>
                    }
                </div>
            </div>

            <!-- Hearings Card (Single Row) -->
            <div class="dashboard-card hearings-card">
                <h4>Hearings</h4>
                @if (caseDetails.Hearings?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Venue</th>
                                    <th>Outcome</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var hearing in caseDetails.Hearings.OrderBy(h => h.HearingDate))
                                {
                                    <tr>
                                        <td>@hearing.HearingDate.ToString("dd MMM yyyy h:mm tt")</td>
                                        <td>@hearing.Venue</td>
                                        <td>@(string.IsNullOrEmpty(hearing.Outcome) ? "N/A" : hearing.Outcome)</td>
                                        <td>
                                            <span class="badge @(hearing.HearingDate > DateTime.Now ? "status-in-progress" : "status-completed")">
                                                @(hearing.HearingDate > DateTime.Now ? "Upcoming" : "Past")
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p>No hearings scheduled.</p>
                }
            </div>

            <!-- Remaining Cards in Grid -->
            <div class="dashboard-grid">
                <!-- Documents Card -->
                <div class="dashboard-card">
                    <h4>Documents</h4>
                    @if (caseDetails.Documents?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Uploaded At</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var doc in caseDetails.Documents)
                                    {
                                        <tr>
                                            <td>@doc.Title</td>
                                            <td>@doc.UploadedAt.ToString("dd MMM yyyy")</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => DownloadDocument(doc)">
                                                    <i class="fas fa-download"></i> Download
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p>No documents available.</p>
                    }
                </div>

                <!-- Invoices Card -->
                <div class="dashboard-card">
                    <h4>Invoices</h4>
                    @if (caseDetails.Invoices?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Amount</th>
                                        <th>Issue Date</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var invoice in caseDetails.Invoices)
                                    {
                                        <tr>
                                            <td>@invoice.InvoiceId</td>
                                            <td>@invoice.Amount.ToString("C")</td>
                                            <td>@invoice.IssuedDate.ToString("dd MMM yyyy")</td>
                                            <td>
                                                <span class="badge @(invoice.Status == "Paid" ? "status-completed" : "status-in-progress")">
                                                    @invoice.Status
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewInvoice(invoice)">
                                                    <i class="fas fa-eye"></i> View
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p>No invoices available.</p>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            Case not found.
        </div>
    }
</div>

@code {
    [Parameter]
    public int LawyerId { get; set; }

    [Parameter]
    public int caseId { get; set; }

    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private Case? caseDetails;
    private bool isLoading = false;
    private string? errorMessage;
    private bool isMobileMenuOpen = false;

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        DashboardState.LawyerId = LawyerId;
        if (string.IsNullOrEmpty(DashboardState.LawyerName))
        {
            await LoadLawyerDetails();
        }
        DashboardState.OnChange += StateHasChanged;
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadLawyerDetails()
    {
        try
        {
            var lawyerResponse = await Http.GetAsync($"/api/Lawyers/{LawyerId}");
            if (lawyerResponse.IsSuccessStatusCode)
            {
                var lawyerContent = await lawyerResponse.Content.ReadAsStringAsync();
                var lawyer = JsonSerializer.Deserialize<Lawyer>(lawyerContent, jsonOptions);
                DashboardState.LawyerName = lawyer?.FullName ?? "Lawyer";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading lawyer details: {ex.Message}";
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            await LoadCaseDetails(caseId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCaseDetails(int id)
    {
        try
        {
            // First attempt to load case with all related data
            var response = await Http.GetAsync($"/api/Cases/{id}?include=client,lawyer,tasks,hearings,documents,invoices");
            if (!response.IsSuccessStatusCode)
            {
                // Fallback to basic case details if the include query fails
                response = await Http.GetAsync($"/api/Cases/{id}");
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = $"Error loading case details: {response.StatusCode}";
                    caseDetails = null;
                    return;
                }

                var content = await response.Content.ReadAsStringAsync();
                caseDetails = JsonSerializer.Deserialize<Case>(content, jsonOptions);
                if (caseDetails != null)
                {
                    if (caseDetails.LawyerId != LawyerId)
                    {
                        errorMessage = "Case does not belong to this lawyer.";
                        caseDetails = null;
                        return;
                    }
                    // Load related data individually
                    caseDetails.CaseTasks = await LoadTasks(id);
                    caseDetails.Hearings = await LoadHearings(id);
                    caseDetails.Documents = await LoadDocuments(id);
                    caseDetails.Invoices = await LoadInvoices(id);
                    caseDetails.Client = await LoadClient(caseDetails.ClientId);
                    caseDetails.Lawyer = await LoadLawyer(caseDetails.LawyerId);
                }
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                caseDetails = JsonSerializer.Deserialize<Case>(content, jsonOptions);
                if (caseDetails != null && caseDetails.LawyerId != LawyerId)
                {
                    errorMessage = "Case does not belong to this lawyer.";
                    caseDetails = null;
                    return;
                }

                // If related data is not included or empty, load them separately
                if (caseDetails?.Hearings == null || !caseDetails.Hearings.Any())
                {
                    caseDetails.Hearings = await LoadHearings(id);
                }
                if (caseDetails?.Documents == null || !caseDetails.Documents.Any())
                {
                    caseDetails.Documents = await LoadDocuments(id);
                }
                if (caseDetails?.Invoices == null || !caseDetails.Invoices.Any())
                {
                    caseDetails.Invoices = await LoadInvoices(id);
                }
            }

            if (caseDetails != null)
            {
                caseDetails.CaseTasks ??= new List<CaseTask>();
                caseDetails.Hearings ??= new List<Hearing>();
                caseDetails.Documents ??= new List<Document>();
                caseDetails.Invoices ??= new List<Invoice>();
            }
        }
        catch (JsonException jsonEx)
        {
            errorMessage = $"Data format error: {jsonEx.Message}";
            caseDetails = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading case details: {ex.Message}";
            caseDetails = null;
        }
    }

    private async Task<List<CaseTask>> LoadTasks(int caseId)
    {
        try
        {
            var response = await Http.GetAsync($"/api/cases/{caseId}/CaseTasks");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Tasks API Raw Response: {content}");

                // Use lenient JSON deserialization options
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        AllowTrailingCommas = true,
                        ReadCommentHandling = JsonCommentHandling.Skip
                    };

                var tasks = JsonSerializer.Deserialize<List<CaseTask>>(content, options) ?? new List<CaseTask>();
                Console.WriteLine($"Deserialized {tasks.Count} tasks");

                // Debug: Log each task's details
                foreach (var task in tasks)
                {
                    Console.WriteLine($"Task ID: {task.TaskId}, Title: {task.Title}, Status: {task.Status}, CreatedAt: {task.CreatedAt}");
                }

                return tasks;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to load tasks: {response.StatusCode} - {errorContent}";
                Console.WriteLine(errorMessage);
                return new List<CaseTask>();
            }
        }
        catch (JsonException jsonEx)
        {
            errorMessage = $"Failed to deserialize tasks: {jsonEx.Message}";
            Console.WriteLine(errorMessage);
            return new List<CaseTask>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading tasks: {ex.Message}";
            Console.WriteLine(errorMessage);
            return new List<CaseTask>();
        }
    }

    private async Task<List<Hearing>> LoadHearings(int caseId)
    {
        try
        {
            var response = await Http.GetAsync($"/api/cases/{caseId}/Hearings");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Hearings API Response: {content}");
                try
                {
                    var hearings = JsonSerializer.Deserialize<List<Hearing>>(content, jsonOptions) ?? new List<Hearing>();
                    Console.WriteLine($"Deserialized Hearings Count: {hearings.Count}");
                    return hearings;
                }
                catch (JsonException jsonEx)
                {
                    errorMessage = $"Failed to deserialize hearings: {jsonEx.Message}";
                    return new List<Hearing>();
                }
            }
            else
            {
                errorMessage = $"Failed to load hearings: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                return new List<Hearing>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading hearings: {ex.Message}";
            return new List<Hearing>();
        }
    }

    private async Task<List<Document>> LoadDocuments(int caseId)
    {
        try
        {
            var response = await Http.GetAsync($"/api/cases/{caseId}/Documents");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Documents API Response: {content}");
                try
                {
                    var documents = JsonSerializer.Deserialize<List<Document>>(content, jsonOptions) ?? new List<Document>();
                    Console.WriteLine($"Deserialized Documents Count: {documents.Count}");
                    return documents;
                }
                catch (JsonException jsonEx)
                {
                    errorMessage = $"Failed to deserialize documents: {jsonEx.Message}";
                    return new List<Document>();
                }
            }
            else
            {
                errorMessage = $"Failed to load documents: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                return new List<Document>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading documents: {ex.Message}";
            return new List<Document>();
        }
    }

    private async Task<List<Invoice>> LoadInvoices(int caseId)
    {
        try
        {
            var response = await Http.GetAsync($"/api/cases/{caseId}/Invoices");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Invoices API Response: {content}");
                try
                {
                    var invoices = JsonSerializer.Deserialize<List<Invoice>>(content, jsonOptions) ?? new List<Invoice>();
                    Console.WriteLine($"Deserialized Invoices Count: {invoices.Count}");
                    return invoices;
                }
                catch (JsonException jsonEx)
                {
                    errorMessage = $"Failed to deserialize invoices: {jsonEx.Message}";
                    return new List<Invoice>();
                }
            }
            else
            {
                errorMessage = $"Failed to load invoices: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                return new List<Invoice>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading invoices: {ex.Message}";
            return new List<Invoice>();
        }
    }

    private async Task<Client?> LoadClient(int clientId)
    {
        if (clientId == 0) return null;
        try
        {
            var response = await Http.GetAsync($"/api/Clients/{clientId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Client API Response: {content}");
                return JsonSerializer.Deserialize<Client>(content, jsonOptions);
            }
            else
            {
                errorMessage = $"Failed to load client: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                return null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading client: {ex.Message}";
            return null;
        }
    }

    private async Task<Lawyer?> LoadLawyer(int lawyerId)
    {
        if (lawyerId == 0) return null;
        try
        {
            var response = await Http.GetAsync($"/api/Lawyers/{lawyerId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Lawyer API Response: {content}");
                return JsonSerializer.Deserialize<Lawyer>(content, jsonOptions);
            }
            else
            {
                errorMessage = $"Failed to load lawyer: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                return null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading lawyer: {ex.Message}";
            return null;
        }
    }

    private string GetStatusBadgeClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "status-open",
            CaseStatus.Completed => "status-completed",
            CaseStatus.InProgress => "status-in-progress",
            _ => "badge-secondary"
        };
    }

    private string GetStatusText(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "Open",
            CaseStatus.Completed => "Completed",
            CaseStatus.InProgress => "In Progress",
            _ => status.ToString()
        };
    }

    private void GoBack()
    {
        DashboardState.Cases = DashboardState.Cases ?? new List<Case>();
        Navigation.NavigateTo($"/lawyer/{LawyerId}/cases");
    }

    private void DownloadDocument(Document document)
    {
        Navigation.NavigateTo($"/lawyer/{LawyerId}/cases/{caseId}/documents/{document.DocumentId}/download");
    }

    private void ViewInvoice(Invoice invoice)
    {
        Navigation.NavigateTo($"/lawyer/{LawyerId}/cases/{caseId}/invoices/{invoice.InvoiceId}/view");
    }

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
    }

    public void Dispose()
    {
        DashboardState.OnChange -= StateHasChanged;
    }
}