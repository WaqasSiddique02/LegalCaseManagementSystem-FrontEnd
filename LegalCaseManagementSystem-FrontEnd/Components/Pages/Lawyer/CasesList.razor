@page "/lawyer/{LawyerId:int}/cases"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject DashboardState DashboardState
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services

<LawyerHeader></LawyerHeader>

<div class="dashboard-grid">
    <div class="content-grid">
        <div class="management-actions">
            <div class="row align-items-center">
                <div class="col-md-6 mb-3 mb-md-0">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="Search cases..." @bind="searchTerm" @bind:event="oninput" />
                    </div>
                </div>
                <div class="col-md-6 mb-3 mb-md-0">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-filter"></i>
                        </span>
                        <select class="form-select" @bind="selectedStatus">
                            <option value="">All Statuses</option>
                            <option value="Open">Open</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        else
        {
            <div class="case-list-container">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">Case ID</th>
                                <th scope="col">Title</th>
                                <th scope="col">Description</th>
                                <th scope="col">Status</th>
                                <th scope="col">Start Date</th>
                                <th scope="col">Client</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var caseItem in FilteredCases)
                            {
                                <tr>
                                    <td>@caseItem.CaseId</td>
                                    <td>@caseItem.Title</td>
                                    <td>@caseItem.Description</td>
                                    <td>
                                        <span class="badge @(GetStatusBadgeClass(caseItem.Status))">
                                            @GetStatusText(caseItem.Status)
                                        </span>
                                    </td>
                                    <td>@caseItem.StartDate.ToString("dd MMM yyyy")</td>
                                    <td>@(caseItem.Client?.FullName ?? "Not assigned")</td>
                                    <td>
                                        <NavLink class="btn btn-primary btn-sm" href="@($"/lawyer/{DashboardState.LawyerId}/cases/{caseItem.CaseId}")">
                                            <i class="bi bi-eye"></i> View
                                        </NavLink>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @if (FilteredCases.Count == 0)
                {
                    <div class="no-cases">
                        <i class="fas fa-folder-open"></i>
                        <p>No cases found matching your criteria.</p>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int LawyerId { get; set; }

    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<Case> allCases = new();
    private List<Case> lawyerCases = new();
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;
    private bool isLoading = false;
    private string? errorMessage;

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        DashboardState.LawyerId = LawyerId;
        if (string.IsNullOrEmpty(DashboardState.LawyerName))
        {
            await LoadLawyerDetails();
        }
        DashboardState.OnChange += StateHasChanged;
        await LoadData();
    }

    private async Task LoadLawyerDetails()
    {
        try
        {
            var lawyerResponse = await Http.GetAsync($"/api/Lawyers/{LawyerId}");
            if (lawyerResponse.IsSuccessStatusCode)
            {
                var lawyerContent = await lawyerResponse.Content.ReadAsStringAsync();
                var lawyer = JsonSerializer.Deserialize<Lawyer>(lawyerContent, jsonOptions);
                DashboardState.LawyerName = lawyer?.FullName ?? "Lawyer";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading lawyer details: {ex.Message}";
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged(); // Force UI update to show loading state

        try
        {
            await LoadCases();
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCases()
    {
        var casesResponse = await Http.GetAsync("/api/Cases?include=client");
        if (!casesResponse.IsSuccessStatusCode)
        {
            errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
            return;
        }

        var casesContent = await casesResponse.Content.ReadAsStringAsync();
        allCases = JsonSerializer.Deserialize<List<Case>>(casesContent, jsonOptions) ?? new();

        // Filter cases by the current lawyer's ID
        lawyerCases = allCases.Where(c => c.LawyerId == LawyerId).ToList();

        DashboardState.Cases = lawyerCases;
        DashboardState.LawyerId = LawyerId;
    }

    private List<Case> FilteredCases
    {
        get
        {
            var filtered = lawyerCases.AsEnumerable();

            if (!string.IsNullOrEmpty(selectedStatus))
            {
                filtered = filtered.Where(c => c.Status.ToString() == selectedStatus);
            }

            if (!string.IsNullOrEmpty(searchTerm))
            {
                var term = searchTerm.Trim();
                filtered = filtered.Where(c =>
                    (c.Title?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (c.Description?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (c.Status.ToString().Contains(term, StringComparison.OrdinalIgnoreCase)) ||
                    (c.Client?.FullName?.Contains(term, StringComparison.OrdinalIgnoreCase) ?? false));
            }

            return filtered.ToList();
        }
    }

    private string GetStatusBadgeClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "bg-warning",
            CaseStatus.Completed => "bg-success",
            CaseStatus.InProgress => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "Open",
            CaseStatus.Completed => "Completed",
            CaseStatus.InProgress => "In Progress",
            _ => status.ToString()
        };
    }

    public void Dispose()
    {
        DashboardState.OnChange -= StateHasChanged;
    }
}