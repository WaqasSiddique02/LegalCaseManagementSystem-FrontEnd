@page "/lawyer/{userId:int}"
@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject DashboardState DashboardState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<LawyerHeader></LawyerHeader>
<div class="dashboard-grid">
    <div class="stats-grid">
        <!-- Open Cases Card -->
        <div class="stat-card" style="--card-color: #4e73df">
            <div class="stat-icon">
                <i class="fas fa-folder-open"></i>
            </div>
            <div class="stat-info">
                <h3>@OpenCasesCount</h3>
                <p>Open Cases</p>
                <span class="stat-trend positive">
                    <i class="fas fa-arrow-up"></i> @OpenCasesTrend%
                </span>
            </div>
        </div>

        <!-- Pending Cases Card -->
        <div class="stat-card" style="--card-color: #f6c23e">
            <div class="stat-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-info">
                <h3>@PendingCasesCount</h3>
                <p>Pending Cases</p>
                <span class="stat-trend @(PendingCasesTrend > 0 ? "positive" : "negative")">
                    <i class="fas @(PendingCasesTrend > 0 ? "fa-arrow-up" : "fa-arrow-down")"></i> @Math.Abs(PendingCasesTrend)%
                </span>
            </div>
        </div>

        <!-- Closed Cases Card -->
        <div class="stat-card" style="--card-color: #1cc88a">
            <div class="stat-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-info">
                <h3>@ClosedCasesCount</h3>
                <p>Closed Cases</p>
                <span class="stat-trend positive">
                    <i class="fas fa-arrow-up"></i> @ClosedCasesTrend%
                </span>
            </div>
        </div>

        <!-- Upcoming Hearings Card -->
        <div class="stat-card" style="--card-color: #e74a3b">
            <div class="stat-icon">
                <i class="fas fa-calendar-alt"></i>
            </div>
            <div class="stat-info">
                <h3>@UpcomingHearingsCount</h3>
                <p>Upcoming Hearings</p>
                <span class="stat-trend @(HearingsTrend > 0 ? "positive" : "negative")">
                    <i class="fas @(HearingsTrend > 0 ? "fa-arrow-up" : "fa-arrow-down")"></i> @Math.Abs(HearingsTrend)%
                </span>
            </div>
        </div>
    </div>
</div>

<div class="content-grid">
    <div class="cases-section">
        <div class="section-header">
            <h2>My Cases</h2>
            <div class="case-controls">
                <div class="case-count">Total: @lawyerCases.Count</div>
                <NavLink class="btn btn-primary btn-sm" href="@($"/lawyer/{DashboardState.LawyerId}/cases")" aria-label="View all cases">
                    <i class="fas fa-list"></i> View All Cases
                </NavLink>
            </div>
        </div>
        @if (DashboardState.IsLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(DashboardState.ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @if (DashboardState.ErrorMessage.Contains("NotFound") || DashboardState.ErrorMessage.Contains("not a lawyer"))
                {
                    <p>Lawyer not found or user is not a lawyer. Please verify the user ID or contact support.</p>
                    <a href="/lawyers" class="btn btn-primary">Back to Dashboard</a>
                }
                else
                {
                    <p>@DashboardState.ErrorMessage</p>
                }
            </div>
        }
        else if (lawyerCases.Any())
        {
            <div class="cases-table-container">
                <table class="cases-table" role="grid" aria-label="My Cases">
                    <thead>
                        <tr>
                            <th scope="col">Case Name</th>
                            <th scope="col">Client</th>
                            <th scope="col">Status</th>
                            <th scope="col">Start Date</th>
                            <th scope="col">End Date</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var caseItem in lawyerCases)
                        {
                            <tr>
                                <td>@caseItem.Title</td>
                                <td>@(caseItem.Client?.FullName ?? "Not assigned")</td>
                                <td>
                                    <span class="case-status @GetStatusClass(caseItem.Status)">
                                        @GetStatusText(caseItem.Status)
                                    </span>
                                </td>
                                <td>@caseItem.StartDate.ToString("dd MMM yyyy")</td>
                                <td>@(caseItem.EndDate?.ToString("dd MMM yyyy") ?? "-")</td>
                                <td>
                                    <NavLink class="btn btn-primary btn-sm" href="@($"/lawyer/{DashboardState.LawyerId}/cases/{caseItem.CaseId}")">
                                        View Details
                                    </NavLink>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="no-cases">
                <i class="fas fa-folder-open"></i>
                <p>No cases assigned yet</p>
            </div>
        }
    </div>

    <div class="hearings-card">
        <div class="card-header">
            <h3>Upcoming Hearings</h3>
            <NavLink class="btn btn-sm btn-primary" href="@($"/lawyer/{DashboardState.LawyerId}/hearings")">
                View All
            </NavLink>
        </div>
        <div class="hearings-list">
            @if (DashboardState.IsLoading)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (lawyerHearings.Any(h => h.HearingDate >= DateTime.Now))
            {
                @foreach (var hearing in lawyerHearings
            .Where(h => h.HearingDate >= DateTime.Now)
            .OrderBy(h => h.HearingDate)
            .Take(3))
                {
                    <div class="hearing-item">
                        <div class="hearing-date">
                            <span class="day">@hearing.HearingDate.ToString("dd")</span>
                            <span class="month">@hearing.HearingDate.ToString("MMM")</span>
                        </div>
                        <div class="hearing-info">
                            <h4>@(lawyerCases.FirstOrDefault(c => c.CaseId == hearing.CaseId)?.Title ?? "Untitled Case")</h4>
                            <p>
                                <i class="fas fa-clock"></i> @hearing.HearingDate.ToString("h:mm tt") •
                                <i class="fas fa-map-marker-alt"></i> @hearing.Venue
                            </p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-muted text-center py-3">No upcoming hearings available.</p>
            }
        </div>
    </div>

    <div class="activity-card">
        <div class="card-header">
            <h3>Recent Activity</h3>
        </div>
        <div class="activity-list">
            @if (DashboardState.IsLoading)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (recentActivities.Any())
            {
                @foreach (var activity in recentActivities.Take(5))
                {
                    <div class="activity-item">
                        <div class="activity-icon">
                            <i class="@activity.Icon"></i>
                        </div>
                        <div class="activity-content">
                            <p>@activity.Description</p>
                            <small class="text-muted">@activity.Timestamp.ToString("g")</small>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-muted text-center py-3">No recent activity.</p>
            }
        </div>
    </div>

    <div class="tasks-card">
        <div class="card-header">
            <h3>Recently Closed Cases</h3>
            <NavLink class="btn btn-sm btn-primary" href="@($"/lawyer/{DashboardState.LawyerId}/cases")">
                View All
            </NavLink>
        </div>
        <div class="closed-cases-list">
            @if (DashboardState.IsLoading)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (RecentlyClosedCases.Any())
            {
                @foreach (var caseItem in RecentlyClosedCases)
                {
                    <div class="closed-case-item">
                        <div class="case-icon">
                            <i class="fas fa-check-circle text-success"></i>
                        </div>
                        <div class="case-info">
                            <h4>@caseItem.Title</h4>
                            <p>
                                <span class="text-muted">Client:</span> @(caseItem.Client?.FullName ?? "Not assigned")<br>
                                <span class="text-muted">Closed:</span>
                            </p>
                        </div>
                        <NavLink class="btn btn-primary btn-sm" href="@($"/lawyer/{DashboardState.LawyerId}/cases/{caseItem.CaseId}")">
                            View Details
                        </NavLink>
                    </div>
                }
            }
            else
            {
                <p class="text-muted text-center py-3">No recently closed cases.</p>
            }
        </div>
    </div>
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<Case> lawyerCases = new();
    private List<Hearing> lawyerHearings = new();
    private List<CaseTask> lawyerTasks = new();
    private List<Document> lawyerDocuments = new();
    private List<DashboardState.Activity> recentActivities = new();

    [Parameter]
    public int userId { get; set; }

    // Stats calculations
    private int OpenCasesCount => lawyerCases.Count(c =>
      c.Status == CaseStatus.Open ||
      c.Status.ToString().Equals("Open", StringComparison.OrdinalIgnoreCase));

    private int PendingCasesCount => lawyerCases.Count(c =>
        c.Status == CaseStatus.InProgress ||
        c.Status.ToString().Equals("InProgress", StringComparison.OrdinalIgnoreCase) ||
        c.Status.ToString().Equals("Pending", StringComparison.OrdinalIgnoreCase));

    private int ClosedCasesCount => lawyerCases.Count(c =>
        c.Status == CaseStatus.Completed ||
        c.Status.ToString().Equals("Completed", StringComparison.OrdinalIgnoreCase) ||
        c.Status.ToString().Equals("Closed", StringComparison.OrdinalIgnoreCase));
    private List<Case> RecentlyClosedCases => lawyerCases
    .Where(c => c.Status == CaseStatus.Completed ||
                c.Status.ToString().Equals("Completed", StringComparison.OrdinalIgnoreCase) ||
                c.Status.ToString().Equals("Closed", StringComparison.OrdinalIgnoreCase))
    .OrderByDescending(c => c.EndDate ?? c.StartDate)
    .Take(5)
    .ToList();
    private int UpcomingHearingsCount => lawyerHearings.Count(h => h.HearingDate >= DateTime.Now);
    private int TotalTasksCount => lawyerTasks.Count;
    private int OpenCasesTrend => CalculateTrend(OpenCasesCount);
    private int PendingCasesTrend => CalculateTrend(PendingCasesCount);
    private int ClosedCasesTrend => CalculateTrend(ClosedCasesCount);
    private int HearingsTrend => CalculateTrend(UpcomingHearingsCount);
    private Lawyer currentLawyer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        DashboardState.OnChange += StateHasChanged;
    }

    private async Task LoadData()
    {
        DashboardState.IsLoading = true;
        DashboardState.ErrorMessage = null;

        try
        {
            // Step 1: Fetch user details by userId
            Console.WriteLine($"Fetching user with userId: {userId}");
            var userResponse = await Http.GetAsync($"/api/Users/{userId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                var errorContent = await userResponse.Content.ReadAsStringAsync();
                DashboardState.ErrorMessage = $"Error loading user details: {userResponse.StatusCode}. Details: {errorContent}";
                Console.WriteLine($"User API error: {errorContent}");
                Navigation.NavigateTo("/lawyers");
                return;
            }

            var userContent = await userResponse.Content.ReadAsStringAsync();
            var user = System.Text.Json.JsonSerializer.Deserialize<User>(userContent,
                new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        Converters = { new System.Text.Json.Serialization.JsonStringEnumConverter() }
                    });

            // Step 2: Verify user is a Lawyer
            if (user.Role != "Lawyer")
            {
                DashboardState.ErrorMessage = "User is not a lawyer.";
                Console.WriteLine($"User role error: UserId {userId} has role {user.Role}");
                Navigation.NavigateTo("/lawyers");
                return;
            }

            // Step 3: Fetch all lawyers to map userId to lawyerId
            var lawyersResponse = await Http.GetAsync("/api/Lawyers");
            if (!lawyersResponse.IsSuccessStatusCode)
            {
                var errorContent = await lawyersResponse.Content.ReadAsStringAsync();
                DashboardState.ErrorMessage = $"Error loading lawyers: {lawyersResponse.StatusCode}. Details: {errorContent}";
                Console.WriteLine($"Lawyers API error: {errorContent}");
                Navigation.NavigateTo("/lawyers");
                return;
            }

            var lawyersContent = await lawyersResponse.Content.ReadAsStringAsync();
            var lawyers = System.Text.Json.JsonSerializer.Deserialize<List<Lawyer>>(lawyersContent,
                new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        Converters = { new System.Text.Json.Serialization.JsonStringEnumConverter() }
                    }) ?? new();

            currentLawyer = lawyers.FirstOrDefault(l => l.UserId == userId);
            if (currentLawyer == null)
            {
                DashboardState.ErrorMessage = $"No lawyer found for userId: {userId}";
                Console.WriteLine($"Lawyer not found for userId: {userId}");
                Navigation.NavigateTo("/lawyers");
                return;
            }

            // Step 4: Set lawyer details
            DashboardState.LawyerId = currentLawyer.LawyerId;
            DashboardState.LawyerName = currentLawyer.FullName ?? "Lawyer";

            // Step 5: Fetch cases for this lawyerId
            var casesResponse = await Http.GetAsync("/api/Cases?include=client");
            if (!casesResponse.IsSuccessStatusCode)
            {
                var errorContent = await casesResponse.Content.ReadAsStringAsync();
                DashboardState.ErrorMessage = $"Error loading cases: {casesResponse.StatusCode}. Details: {errorContent}";
                Console.WriteLine($"Cases API error: {errorContent}");
                return;
            }

            var casesContent = await casesResponse.Content.ReadAsStringAsync();
            var allCases = System.Text.Json.JsonSerializer.Deserialize<List<Case>>(casesContent,
                new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                        Converters = { new System.Text.Json.Serialization.JsonStringEnumConverter() }
                    }) ?? new();

            lawyerCases = allCases.Where(c => c.LawyerId == currentLawyer.LawyerId).ToList();
            DashboardState.Cases = lawyerCases;

            foreach (var caseItem in lawyerCases)
            {
                // Load hearings
                var hearingsResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Hearings");
                if (hearingsResponse.IsSuccessStatusCode)
                {
                    var hearingsContent = await hearingsResponse.Content.ReadAsStringAsync();
                    var hearings = System.Text.Json.JsonSerializer.Deserialize<List<Hearing>>(hearingsContent,
                        new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
                    lawyerHearings.AddRange(hearings);
                }

                // Load tasks
                var tasksResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Tasks");
                if (tasksResponse.IsSuccessStatusCode)
                {
                    var tasksContent = await tasksResponse.Content.ReadAsStringAsync();
                    var tasks = System.Text.Json.JsonSerializer.Deserialize<List<CaseTask>>(tasksContent,
                        new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
                    lawyerTasks.AddRange(tasks);
                }

                // Load documents
                var docsResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Documents");
                if (docsResponse.IsSuccessStatusCode)
                {
                    var docsContent = await docsResponse.Content.ReadAsStringAsync();
                    var documents = System.Text.Json.JsonSerializer.Deserialize<List<Document>>(docsContent,
                        new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
                    lawyerDocuments.AddRange(documents);
                }

                // Load invoices
                var invoicesResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Invoices");
                if (invoicesResponse.IsSuccessStatusCode)
                {
                    var invoicesContent = await invoicesResponse.Content.ReadAsStringAsync();
                    var invoices = System.Text.Json.JsonSerializer.Deserialize<List<Invoice>>(invoicesContent,
                        new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
                    DashboardState.Invoices.AddRange(invoices);
                }
            }

            DashboardState.UpcomingHearings = lawyerHearings.Where(h => h.HearingDate >= DateTime.Now).ToList();
            DashboardState.RecentTasks = lawyerTasks.OrderByDescending(t => t.CreatedAt).Take(5).ToList();
            recentActivities = GenerateRecentActivities();
            DashboardState.RecentActivities = recentActivities;

            DashboardState.NotifyStateChanged();
        }
        catch (System.Text.Json.JsonException jsonEx)
        {
            DashboardState.ErrorMessage = $"Data format error: {jsonEx.Message}";
            Console.WriteLine($"JSON Error: {jsonEx}");
        }
        catch (Exception ex)
        {
            DashboardState.ErrorMessage = $"Exception loading data: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            DashboardState.IsLoading = false;
            DashboardState.NotifyStateChanged();
        }
    }

    private void NavigateToCases()
    {
        if (DashboardState.LawyerId > 0)
        {
            Navigation.NavigateTo($"/lawyer/{DashboardState.LawyerId}/cases");
        }
        else
        {
            Console.WriteLine("Cannot navigate - lawyer ID not available");
        }
    }

    private List<DashboardState.Activity> GenerateRecentActivities()
    {
        var activities = new List<DashboardState.Activity>();

        // Add activities from hearings
        foreach (var hearing in lawyerHearings.Where(h => h.HearingDate >= DateTime.Now.AddDays(-7)))
        {
            var caseItem = lawyerCases.FirstOrDefault(c => c.CaseId == hearing.CaseId);
            if (caseItem != null)
            {
                activities.Add(new DashboardState.Activity
                    {
                        Description = $"Scheduled hearing for {caseItem.Title}",
                        Timestamp = hearing.HearingDate,
                        Icon = "fas fa-calendar-alt"
                    });
            }
        }

        // Add activities from tasks
        foreach (var task in lawyerTasks.OrderByDescending(t => t.CreatedAt).Take(5))
        {
            var caseItem = lawyerCases.FirstOrDefault(c => c.CaseId == task.CaseId);
            if (caseItem != null)
            {
                activities.Add(new DashboardState.Activity
                    {
                        Description = task.CompletedAt.HasValue
                            ? $"Completed task '{task.Title}' in {caseItem.Title}"
                            : $"Assigned task '{task.Title}' in {caseItem.Title}",
                        Timestamp = task.CompletedAt ?? task.CreatedAt,
                        Icon = task.CompletedAt.HasValue ? "fas fa-check-circle" : "fas fa-file-alt"
                    });
            }
        }

        // Add activities from documents
        foreach (var doc in lawyerDocuments.OrderByDescending(d => d.UploadedAt).Take(5))
        {
            var caseItem = lawyerCases.FirstOrDefault(c => c.CaseId == doc.CaseId);
            if (caseItem != null)
            {
                activities.Add(new DashboardState.Activity
                    {
                        Description = $"Uploaded document '{doc.Title}' for {caseItem.Title}",
                        Timestamp = doc.UploadedAt,
                        Icon = "fas fa-file-upload"
                    });
            }
        }

        return activities.OrderByDescending(a => a.Timestamp).ToList();
    }

 

    private async Task ToggleTaskCompletion(CaseTask task)
    {
        try
        {
            var updatedTask = new
            {
                Title = task.Title,
                Description = task.Description,
                Status = task.Status == "Completed" ? "Pending" : "Completed"
            };

            var response = await Http.PutAsJsonAsync($"/api/cases/{task.CaseId}/Tasks/{task.TaskId}", updatedTask);

            if (response.IsSuccessStatusCode)
            {
                task.Status = updatedTask.Status;
                task.CompletedAt = task.Status == "Completed" ? DateTime.Now : null;

                // Refresh activities
                recentActivities = GenerateRecentActivities();
                DashboardState.NotifyStateChanged();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                DashboardState.ErrorMessage = $"Error updating task: {response.StatusCode}. Details: {errorContent}";
                Console.WriteLine($"Task update error: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            DashboardState.ErrorMessage = $"Exception updating task: {ex.Message}";
            Console.WriteLine($"Task update exception: {ex}");
        }
    }

    private void ViewCaseDetails(int caseId)
    {
        if (DashboardState.LawyerId > 0)
        {
            Navigation.NavigateTo($"/lawyer/{DashboardState.LawyerId}/cases/{caseId}");
        }
    }
    private string GetStatusClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "status-open",
            CaseStatus.Completed => "status-completed",
            CaseStatus.InProgress => "status-in-progress",
            _ => string.Empty
        };
    }

    private string GetStatusText(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "Open",
            CaseStatus.Completed => "Completed",
            CaseStatus.InProgress => "In Progress",
            _ => status.ToString()
        };
    }

    private int CalculateTrend(int currentCount)
    {
        var random = new Random();
        return random.Next(1, 10);
    }

    public void Dispose()
    {
        DashboardState.OnChange -= StateHasChanged;
    }
}