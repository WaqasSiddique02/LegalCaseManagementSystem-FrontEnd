@page "/lawyer/{userId:int}"
@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject DashboardState DashboardState
@inject NavigationManager Navigation
@implements IDisposable

<LawyerHeader></LawyerHeader>
<div class="dashboard-grid">
    <div class="stats-grid">
        <!-- Open Cases Card -->
        <div class="stat-card" style="--card-color: #4e73df">
            <div class="stat-icon">
                <i class="fas fa-folder-open"></i>
            </div>
            <div class="stat-info">
                <h3>@OpenCasesCount</h3>
                <p>Open Cases</p>
                <span class="stat-trend positive">
                    <i class="fas fa-arrow-up"></i> @OpenCasesTrend%
                </span>
            </div>
        </div>

        <!-- Pending Cases Card -->
        <div class="stat-card" style="--card-color: #f6c23e">
            <div class="stat-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-info">
                <h3>@PendingCasesCount</h3>
                <p>Pending Cases</p>
                <span class="stat-trend @(PendingCasesTrend > 0 ? "positive" : "negative")">
                    <i class="fas @(PendingCasesTrend > 0 ? "fa-arrow-up" : "fa-arrow-down")"></i> @Math.Abs(PendingCasesTrend)%
                </span>
            </div>
        </div>

        <!-- Closed Cases Card -->
        <div class="stat-card" style="--card-color: #1cc88a">
            <div class="stat-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-info">
                <h3>@ClosedCasesCount</h3>
                <p>Closed Cases</p>
                <span class="stat-trend positive">
                    <i class="fas fa-arrow-up"></i> @ClosedCasesTrend%
                </span>
            </div>
        </div>

        <!-- Upcoming Hearings Card -->
        <div class="stat-card" style="--card-color: #e74a3b">
            <div class="stat-icon">
                <i class="fas fa-calendar-alt"></i>
            </div>
            <div class="stat-info">
                <h3>@UpcomingHearingsCount</h3>
                <p>Upcoming Hearings</p>
                <span class="stat-trend @(HearingsTrend > 0 ? "positive" : "negative")">
                    <i class="fas @(HearingsTrend > 0 ? "fa-arrow-up" : "fa-arrow-down")"></i> @Math.Abs(HearingsTrend)%
                </span>
            </div>
        </div>
    </div>
</div>

<div class="content-grid">
    <div class="cases-section">
        <div class="section-header">
            <h2>My Cases</h2>
            <div class="case-controls">
                <div class="case-count">Total: @lawyerCases.Count</div>
                <NavLink class="btn btn-primary btn-sm" href="@($"/lawyer/{DashboardState.LawyerId}/cases")" aria-label="View all cases">
                    <i class="fas fa-list"></i> View All Cases
                </NavLink>
            </div>
        </div>
        @if (DashboardState.IsLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(DashboardState.ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @if (DashboardState.ErrorMessage.Contains("NotFound") || DashboardState.ErrorMessage.Contains("not a lawyer"))
                {
                    <p>Lawyer not found or user is not a lawyer. Please verify the user ID or contact support.</p>
                    <a href="/lawyers" class="btn btn-primary">Back to Dashboard</a>
                }
                else
                {
                    <p>@DashboardState.ErrorMessage</p>
                }
            </div>
        }
        else if (lawyerCases.Any())
        {
            <div class="cases-table-container">
                <table class="cases-table" role="grid" aria-label="My Cases">
                    <thead>
                        <tr>
                            <th scope="col">Case Name</th>
                            <th scope="col">Client</th>
                            <th scope="col">Status</th>
                            <th scope="col">Start Date</th>
                            <th scope="col">End Date</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var caseItem in lawyerCases)
                        {
                            <tr>
                                <td>@caseItem.Title</td>
                                <td>@(caseItem.Client?.FullName ?? "Not assigned")</td>
                                <td>
                                    <span class="case-status @GetStatusClass(caseItem.Status)">
                                        @GetStatusText(caseItem.Status)
                                    </span>
                                </td>
                                <td>@caseItem.StartDate.ToString("dd MMM yyyy")</td>
                                <td>@(caseItem.EndDate?.ToString("dd MMM yyyy") ?? "-")</td>
                                <td>
                                    <NavLink class="btn btn-primary btn-sm" href="@($"/lawyer/{DashboardState.LawyerId}/cases/{caseItem.CaseId}")">
                                        View Details
                                    </NavLink>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="no-cases">
                <i class="fas fa-folder-open"></i>
                <p>No cases assigned yet</p>
            </div>
        }
    </div>

    <div class="hearings-card">
        <div class="card-header">
            <h3>Upcoming Hearings</h3>
            <NavLink class="btn btn-sm btn-primary" href="@($"/lawyer/{DashboardState.LawyerId}/hearings")">
                View All
            </NavLink>
        </div>
        <div class="hearings-list">
            @if (DashboardState.IsLoading)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (lawyerHearings.Any(h => h.HearingDate >= DateTime.Now))
            {
                @foreach (var hearing in lawyerHearings
               .Where(h => h.HearingDate >= DateTime.Now)
               .OrderBy(h => h.HearingDate)
               .Take(3))
                {
                    <div class="hearing-item">
                        <div class="hearing-date">
                            <span class="day">@hearing.HearingDate.ToString("dd")</span>
                            <span class="month">@hearing.HearingDate.ToString("MMM")</span>
                        </div>
                        <div class="hearing-info">
                            <h4>@(lawyerCases.FirstOrDefault(c => c.CaseId == hearing.CaseId)?.Title ?? "Untitled Case")</h4>
                            <p>
                                <i class="fas fa-clock"></i> @hearing.HearingDate.ToString("h:mm tt") •
                                <i class="fas fa-map-marker-alt"></i> @hearing.Venue
                            </p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-muted text-center py-3">No upcoming hearings available.</p>
            }
        </div>
    </div>

    <div class="activity-card">
        <div class="card-header">
            <h3>Recent Activity</h3>
        </div>
        <div class="activity-list">
            @if (DashboardState.IsLoading)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (recentActivities.Any())
            {
                @foreach (var activity in recentActivities.Take(5))
                {
                    <div class="activity-item">
                        <div class="activity-icon">
                            <i class="@activity.Icon"></i>
                        </div>
                        <div class="activity-content">
                            <p>@activity.Description</p>
                            <small class="text-muted">@activity.Timestamp.ToString("g")</small>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-muted text-center py-3">No recent activity.</p>
            }
        </div>
    </div>

    <div class="tasks-card">
        <div class="card-header">
            <h3>Recently Closed Cases</h3>
            <NavLink class="btn btn-sm btn-primary" href="@($"/lawyer/{DashboardState.LawyerId}/cases")">
                View All
            </NavLink>
        </div>
        <div class="closed-cases-list">
            @if (DashboardState.IsLoading)
            {
                <div class="text-center py-3">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (RecentlyClosedCases.Any())
            {
                @foreach (var caseItem in RecentlyClosedCases)
                {
                    <div class="closed-case-item">
                        <div class="case-icon">
                            <i class="fas fa-check-circle text-success"></i>
                        </div>
                        <div class="case-info">
                            <h4>@caseItem.Title</h4>
                            <p>
                                <span class="text-muted">Client:</span> @(caseItem.Client?.FullName ?? "Not assigned")<br>
                                <span class="text-muted">Closed:</span> @(caseItem.EndDate?.ToString("dd MMM yyyy") ?? "-")
                            </p>
                        </div>
                        <NavLink class="btn btn-primary btn-sm" href="@($"/lawyer/{DashboardState.LawyerId}/cases/{caseItem.CaseId}")">
                            View Details
                        </NavLink>
                    </div>
                }
            }
            else
            {
                <p class="text-muted text-center py-3">No recently closed cases.</p>
            }
        </div>
    </div>
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<Case> lawyerCases = new();
    private List<Hearing> lawyerHearings = new();
    private List<DashboardState.Activity> recentActivities = new();
    private string? errorMessage;

    [Parameter]
    public int userId { get; set; }

    private Lawyer? currentLawyer;

    // Stats calculations
    private int OpenCasesCount => lawyerCases.Count(c =>
        c.Status == CaseStatus.Open ||
        c.Status.ToString().Equals("Open", StringComparison.OrdinalIgnoreCase));

    private int PendingCasesCount => lawyerCases.Count(c =>
        c.Status == CaseStatus.InProgress ||
        c.Status == CaseStatus.Pending ||
        c.Status.ToString().Equals("InProgress", StringComparison.OrdinalIgnoreCase) ||
        c.Status.ToString().Equals("Pending", StringComparison.OrdinalIgnoreCase));

    private int ClosedCasesCount => lawyerCases.Count(c =>
        c.Status == CaseStatus.Completed ||
        c.Status == CaseStatus.Closed ||
        c.Status.ToString().Equals("Completed", StringComparison.OrdinalIgnoreCase) ||
        c.Status.ToString().Equals("Closed", StringComparison.OrdinalIgnoreCase));

    private List<Case> RecentlyClosedCases =>
        lawyerCases
            .Where(c =>
                c.Status == CaseStatus.Completed ||
                c.Status == CaseStatus.Closed ||
                c.Status.ToString().Equals("Completed", StringComparison.OrdinalIgnoreCase) ||
                c.Status.ToString().Equals("Closed", StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(c => c.EndDate ?? c.StartDate)
            .Take(5)
            .ToList();

    private int UpcomingHearingsCount => lawyerHearings.Count(h => h.HearingDate > DateTime.Now);

    private int OpenCasesTrend => CalculateTrend(OpenCasesCount);
    private int PendingCasesTrend => CalculateTrend(PendingCasesCount);
    private int ClosedCasesTrend => CalculateTrend(ClosedCasesCount);
    private int HearingsTrend => CalculateTrend(UpcomingHearingsCount);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        DashboardState.OnChange += StateHasChanged;
    }

    private async Task LoadData()
    {
        DashboardState.IsLoading = true;
        DashboardState.ErrorMessage = null;

        try
        {
            // Fetch user details
            Console.WriteLine($"Fetching user with UserId: {userId}");
            var userResponse = await Http.GetAsync($"/api/Users/{userId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                DashboardState.IsLoading = false;
                return;
            }
            var user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);
            if (user == null)
            {
                errorMessage = "User not found for this UserId";
                DashboardState.IsLoading = false;
                return;
            }
            Console.WriteLine($"User loaded: UserId={user.UserId}, Username={user.Username ?? "No username"}");

            // Verify user is a Lawyer
            if (user.Role != "Lawyer")
            {
                errorMessage = "User is not a lawyer.";
                DashboardState.IsLoading = false;
                Navigation.NavigateTo("/lawyers");
                return;
            }

            // Fetch lawyer by UserId
            Console.WriteLine($"Fetching lawyers");
            var lawyersResponse = await Http.GetAsync("/api/Lawyers");
            if (!lawyersResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading lawyers: {lawyersResponse.StatusCode}";
                DashboardState.IsLoading = false;
                return;
            }

            var lawyers = await lawyersResponse.Content.ReadFromJsonAsync<List<Lawyer>>(jsonOptions);
            currentLawyer = lawyers?.FirstOrDefault(l => l.UserId == userId);

            if (currentLawyer == null)
            {
                errorMessage = "No lawyer found for this user";
                DashboardState.IsLoading = false;
                Navigation.NavigateTo("/lawyers");
                return;
            }
            Console.WriteLine($"Lawyer loaded: LawyerId={currentLawyer.LawyerId}, UserId={currentLawyer.UserId}, FullName={currentLawyer.FullName}");

            // Set lawyer details in DashboardState
            DashboardState.LawyerId = currentLawyer.LawyerId;
            DashboardState.LawyerName = currentLawyer.FullName;

            // Fetch cases for this lawyer
            Console.WriteLine($"Fetching cases for LawyerId={currentLawyer.LawyerId}");
            var casesResponse = await Http.GetAsync("/api/Cases");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                DashboardState.IsLoading = false;
                return;
            }

            var allCases = await casesResponse.Content.ReadFromJsonAsync<List<Case>>(jsonOptions) ?? new List<Case>();
            lawyerCases = allCases.Where(c => c.LawyerId == currentLawyer.LawyerId).ToList();
            DashboardState.Cases = lawyerCases;
            Console.WriteLine($"Found {lawyerCases.Count} cases for LawyerId={currentLawyer.LawyerId}");

            // Load hearings for each case
            var tasks = new List<Task>();
            foreach (var caseItem in lawyerCases)
            {
                tasks.Add(LoadHearings(caseItem));
            }
            await Task.WhenAll(tasks);

            DashboardState.UpcomingHearings = lawyerHearings.Where(h => h.HearingDate > DateTime.Now).ToList();
            recentActivities = GenerateRecentActivities();
            DashboardState.RecentActivities = recentActivities;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Exception in LoadData: {ex}");
        }
        finally
        {
            DashboardState.IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadHearings(Case caseItem)
    {
        try
        {
            // Verify case belongs to the lawyer
            if (caseItem.LawyerId != currentLawyer!.LawyerId)
            {
                Console.WriteLine($"Case {caseItem.CaseId} does not belong to lawyer {currentLawyer.LawyerId}");
                return;
            }

            // Fetch hearings
            var hearingsResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Hearings");
            if (hearingsResponse.IsSuccessStatusCode)
            {
                var caseHearings = await hearingsResponse.Content.ReadFromJsonAsync<List<Hearing>>(jsonOptions) ?? new List<Hearing>();
                lawyerHearings.AddRange(caseHearings.Where(h => h.CaseId == caseItem.CaseId));
            }
            else
            {
                Console.WriteLine($"Failed to load hearings for case {caseItem.CaseId}: {hearingsResponse.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading hearings for case {caseItem.CaseId}: {ex.Message}");
        }
    }

    private List<DashboardState.Activity> GenerateRecentActivities()
    {
        var activities = new List<DashboardState.Activity>();

        // Add activities from hearings
        foreach (var hearing in lawyerHearings.Where(h => h.HearingDate >= DateTime.Now.AddDays(-7)))
        {
            var caseItem = lawyerCases.FirstOrDefault(c => c.CaseId == hearing.CaseId);
            if (caseItem != null)
            {
                activities.Add(new DashboardState.Activity
                    {
                        Description = $"Scheduled hearing for {caseItem.Title}",
                        Timestamp = hearing.HearingDate,
                        Icon = "fas fa-calendar-alt"
                    });
            }
        }

        return activities.OrderByDescending(a => a.Timestamp).ToList();
    }

    private string GetStatusClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "status-open",
            CaseStatus.Completed => "status-completed",
            CaseStatus.Closed => "status-closed",
            CaseStatus.InProgress => "status-in-progress",
            CaseStatus.Pending => "status-pending",
            _ => string.Empty
        };
    }

    private string GetStatusText(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "Open",
            CaseStatus.Completed => "Completed",
            CaseStatus.Closed => "Closed",
            CaseStatus.InProgress => "In Progress",
            CaseStatus.Pending => "Pending",
            _ => status.ToString()
        };
    }

    private int CalculateTrend(int currentCount)
    {
        var random = new Random();
        return random.Next(1, 10);
    }

    public void Dispose()
    {
        DashboardState.OnChange -= StateHasChanged;
    }

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };
}