@page "/lawyer/{userId:int}/hearings"
@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<LawyerHeader></LawyerHeader>

<div class="hearings-container dark-theme">
    <div class="header-section">
        <h1>My Hearings</h1>
        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" class="search-input" placeholder="Search hearings..." @bind="searchQuery" @oninput="FilterHearings" />
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner"></div>
            <p>Loading hearings...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="error-state">
            <i class="fas fa-exclamation-circle"></i>
            <p>@errorMessage</p>
            <button class="retry-btn" @onclick="LoadHearings">Retry</button>
        </div>
    }
    else if (!filteredHearings.Any())
    {
        <div class="empty-state">
            <i class="fas fa-calendar-times"></i>
            <p>No hearings found</p>
            @if (!string.IsNullOrEmpty(searchQuery))
            {
                <button class="clear-search" @onclick="ClearSearch">Clear search</button>
            }
        </div>
    }
    else
    {
        <div class="hearings-grid">
            @foreach (var hearing in filteredHearings)
            {
                var caseItem = caseLookup.GetValueOrDefault(hearing.CaseId);
                <div class="hearing-card @GetStatusClass(hearing.HearingDate)">
                    <div class="card-header">
                        <span class="status-badge">@GetStatusText(hearing.HearingDate)</span>
                        <span class="hearing-date">@hearing.HearingDate.ToString("MMM dd, yyyy")</span>
                    </div>
                    <div class="card-body">
                        <h3>
                            @if (caseItem != null)
                            {
                                <a href="@($"/lawyer/{userId}/cases/{caseItem.CaseId}")" class="case-title">
                                    @caseItem.Title
                                </a>
                            }
                            else
                            {
                                <span class="case-not-found">Case not found</span>
                            }
                        </h3>
                        <div class="hearing-time">
                            <i class="far fa-clock"></i>
                            @hearing.HearingDate.ToString("h:mm tt")
                        </div>
                        <div class="hearing-venue">
                            <i class="fas fa-map-marker-alt"></i>
                            @hearing.Venue
                        </div>
                    </div>
                    <div class="card-footer">
                        <button class="view-btn" @onclick="() => ViewHearingDetails(hearing.HearingId)">
                            <i class="fas fa-eye"></i> View Details
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int userId { get; set; }

    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<Hearing> allHearings = new();
    private List<Hearing> filteredHearings = new();
    private Dictionary<int, Case> caseLookup = new();
    private bool isLoading = true;
    private string? errorMessage;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            allHearings.Clear();
            caseLookup.Clear();

            var jsonOptions = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    Converters = { new JsonStringEnumConverter() }
                };

            // Fetch lawyer details to get lawyerId
            var lawyerResponse = await Http.GetAsync($"/api/Lawyers?userId={userId}");
            if (!lawyerResponse.IsSuccessStatusCode)
            {
                errorMessage = await GetDetailedErrorMessage(lawyerResponse, "lawyer details");
                return;
            }

            var lawyerContent = await lawyerResponse.Content.ReadAsStringAsync();
            var lawyers = JsonSerializer.Deserialize<List<Lawyer>>(lawyerContent, jsonOptions);
            var lawyer = lawyers?.FirstOrDefault();
            if (lawyer == null)
            {
                errorMessage = "Lawyer not found for the given user ID";
                return;
            }

            // Fetch cases for this lawyer
            var casesResponse = await Http.GetAsync($"/api/Cases?lawyerId={lawyer.LawyerId}");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = await GetDetailedErrorMessage(casesResponse, "cases");
                return;
            }

            var casesContent = await casesResponse.Content.ReadAsStringAsync();
            var lawyerCases = JsonSerializer.Deserialize<List<Case>>(casesContent, jsonOptions) ?? new();
            caseLookup = lawyerCases.ToDictionary(c => c.CaseId, c => c);

            // Fetch hearings for each case
            foreach (var caseItem in lawyerCases)
            {
                var hearingsResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Hearings");
                if (!hearingsResponse.IsSuccessStatusCode)
                {
                    errorMessage = await GetDetailedErrorMessage(hearingsResponse, $"hearings for case {caseItem.CaseId}");
                    return;
                }

                var hearingsContent = await hearingsResponse.Content.ReadAsStringAsync();
                var caseHearings = JsonSerializer.Deserialize<List<Hearing>>(hearingsContent, jsonOptions) ?? new();
                allHearings.AddRange(caseHearings);
            }

            allHearings = allHearings.OrderBy(h => h.HearingDate).ToList();
            FilterHearings();
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Network error: {httpEx.Message}";
            Console.WriteLine($"HTTP Error: {httpEx}");
        }
        catch (JsonException jsonEx)
        {
            errorMessage = $"Data format error: {jsonEx.Message}";
            Console.WriteLine($"JSON Error: {jsonEx}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterHearings()
    {
        var filtered = allHearings;

        if (!string.IsNullOrEmpty(searchQuery))
        {
            var query = searchQuery.ToLower();
            filtered = filtered.Where(h =>
                (caseLookup.TryGetValue(h.CaseId, out var caseItem) &&
                caseItem.Title.ToLower().Contains(query) ||
                h.Venue.ToLower().Contains(query) ||
                h.HearingDate.ToString("MMMM dd, yyyy").ToLower().Contains(query))
            ).ToList();
        }

        filteredHearings = filtered;
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        FilterHearings();
    }

    private string GetStatusClass(DateTime hearingDate)
    {
        return hearingDate.ToUniversalTime() >= DateTime.UtcNow ? "upcoming" : "past";
    }

    private string GetStatusText(DateTime hearingDate)
    {
        return hearingDate.ToUniversalTime() >= DateTime.UtcNow ? "Upcoming" : "Completed";
    }

    private void ViewHearingDetails(int hearingId)
    {
        Navigation.NavigateTo($"/lawyer/{userId}/hearings/{hearingId}");
    }

    private async Task<string> GetDetailedErrorMessage(HttpResponseMessage response, string endpoint)
    {
        try
        {
            var content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API Error Response ({endpoint}): {content}");

            return response.StatusCode switch
            {
                HttpStatusCode.NotFound => $"The {endpoint} endpoint was not found",
                HttpStatusCode.Unauthorized => "You need to be logged in to access this data",
                HttpStatusCode.Forbidden => "You don't have permission to access this data",
                _ => $"Failed to load {endpoint} data (Status: {response.StatusCode})"
            };
        }
        catch
        {
            return $"Failed to load {endpoint} data (Status: {response.StatusCode})";
        }
    }

    private async Task LoadHearings()
    {
        await LoadData();
    }
}