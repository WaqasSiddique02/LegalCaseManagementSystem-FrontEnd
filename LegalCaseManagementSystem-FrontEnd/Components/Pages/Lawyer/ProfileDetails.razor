@page "/profile-details/{userId:int}"
@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject DashboardState DashboardState

<div class="profile-container @(DashboardState.IsDarkMode ? "dark-mode" : "")">
    <div class="profile-header">
        <h2>Lawyer Profile</h2>
        <NavLink class="btn btn-secondary" href="@($"/lawyer/{UserId}")">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </NavLink>

    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (lawyer != null)
    {
        <div class="profile-card">
            <div class="profile-image">
                <img src="https://ui-avatars.com/api/?name=@(lawyer.FullName)&background=4e73df&color=fff" 
                     alt="Profile Image" />
            </div>
            
            <div class="profile-info">
                <div class="info-group">
                    <h3>Personal Information</h3>
                    <div class="info-row">
                        <span class="info-label">Full Name:</span>
                        <span class="info-value">@lawyer.FullName</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Specialization:</span>
                        <span class="info-value">@lawyer.Specialization</span>
                    </div>
                </div>

                <div class="info-group">
                    <h3>Account Information</h3>
                    <div class="info-row">
                        <span class="info-label">Username:</span>
                        <span class="info-value">@user?.Username</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Email:</span>
                        <span class="info-value">@user?.Email</span>
                    </div>
                </div>

                <div class="profile-actions">
                    <button class="btn btn-primary" @onclick="NavigateToEdit">
                        <i class="fas fa-edit"></i> Edit Profile
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int UserId { get; set; }

    private Lawyer? lawyer;
    private User? user;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // Get lawyer details
            var lawyerResponse = await Http.GetAsync($"/api/Lawyers/{UserId}");
            if (!lawyerResponse.IsSuccessStatusCode)
            {
                errorMessage = "Failed to load lawyer details";
                return;
            }

            var lawyerContent = await lawyerResponse.Content.ReadAsStringAsync();
            lawyer = System.Text.Json.JsonSerializer.Deserialize<Lawyer>(lawyerContent,
                new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            // Get user details
            if (lawyer != null && lawyer.UserId > 0)
            {
                var userResponse = await Http.GetAsync($"/api/Users/{lawyer.UserId}");
                if (userResponse.IsSuccessStatusCode)
                {
                    var userContent = await userResponse.Content.ReadAsStringAsync();
                    user = System.Text.Json.JsonSerializer.Deserialize<User>(userContent,
                        new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToDashboard()
    {
        Navigation.NavigateTo($"/lawyer/{UserId}");
    }

    private void NavigateToEdit()
    {
        Navigation.NavigateTo($"/lawyer/{UserId}/edit");
    }
}