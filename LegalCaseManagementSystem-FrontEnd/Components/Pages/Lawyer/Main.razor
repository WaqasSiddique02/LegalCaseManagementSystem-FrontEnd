@page "/lawyer"
@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services
@using LegalCaseManagementSystem_FrontEnd.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject DashboardState DashboardState
@inject NavigationManager Navigation
@implements IDisposable

<div class="dashboard @(DashboardState.IsDarkMode ? "dark-mode" : "")" @ref="dashboardRef">
    <Header />
    <div class="dashboard-grid">
        <StatsCards />
        <div class="content-grid">
            <CaseStatusChart />
            <div class="cases-section">
                <div class="section-header">
                    <h2>My Cases</h2>
                    <div class="case-count">Total: @DashboardState.Cases.Count</div>
                </div>
                <LoadingAndError>
                    @if (DashboardState.Cases.Any())
                    {
                        <div class="cases-grid">
                            @foreach (var caseItem in DashboardState.Cases)
                            {
                                <CaseDetailsCard CaseItem="caseItem" OnTakeCase="TakeCase" />
                            }
                        </div>
                    }
                    else
                    {
                        <div class="no-cases">
                            <i class="fas fa-folder-open"></i>
                            <p>No cases assigned yet</p>
                        </div>
                    }
                </LoadingAndError>
            </div>
            <Hearings OnShowAllHearings="ShowAllHearings" />
            <Activity />
            <TaskProgress OnToggleTaskCompletion="ToggleTaskCompletion" />
        </div>
    </div>
</div>

@code {
    private ElementReference dashboardRef;
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    private static readonly System.Text.Json.JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new System.Text.Json.Serialization.JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        DashboardState.OnChange += StateHasChanged;
    }

    private async Task LoadData()
    {
        DashboardState.IsLoading = true;
        DashboardState.ErrorMessage = null;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            DashboardState.LawyerName = authState.User.Identity?.Name ?? "Lawyer";
            var lawyerIdClaim = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            DashboardState.LawyerId = int.TryParse(lawyerIdClaim, out var id) ? id : null;

            var casesResponse = await Http.GetAsync("/api/Cases");
            if (!casesResponse.IsSuccessStatusCode)
            {
                DashboardState.ErrorMessage = $"Error loading cases: {casesResponse.StatusCode} - {await casesResponse.Content.ReadAsStringAsync()}";
                return;
            }
            var casesContent = await casesResponse.Content.ReadAsStringAsync();
            DashboardState.Cases = System.Text.Json.JsonSerializer.Deserialize<List<Case>>(casesContent, jsonOptions) ?? new();
            // Initialize collections to prevent null issues
            foreach (var caseItem in DashboardState.Cases)
            {
                caseItem.CaseTasks ??= new List<CaseTask>();
                caseItem.Documents ??= new List<Document>();
                caseItem.Hearings ??= new List<Hearing>();
            }

            DashboardState.UpcomingHearings = new();
            DashboardState.RecentTasks = new();
            DashboardState.RecentActivities = new();
            foreach (var caseItem in DashboardState.Cases)
            {
                var hearingsResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Hearings");
                if (hearingsResponse.IsSuccessStatusCode)
                {
                    var hearingsContent = await hearingsResponse.Content.ReadAsStringAsync();
                    var hearings = System.Text.Json.JsonSerializer.Deserialize<List<Hearing>>(hearingsContent, jsonOptions) ?? new();
                    caseItem.Hearings = hearings;
                    foreach (var hearing in hearings)
                    {
                        hearing.Case = caseItem;
                        if (hearing.HearingDate >= DateTime.Now)
                        {
                            DashboardState.UpcomingHearings.Add(hearing);
                            DashboardState.RecentActivities.Add(new DashboardState.Activity
                                {
                                    Description = $"Scheduled hearing for {caseItem.Title}",
                                    Timestamp = hearing.HearingDate,
                                    Icon = "fas fa-calendar-alt"
                                });
                        }
                    }
                }
                else
                {
                    DashboardState.ErrorMessage += $"Warning: Failed to load hearings for case {caseItem.CaseId}. ";
                }

                var tasksResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/CaseTasks");
                if (tasksResponse.IsSuccessStatusCode)
                {
                    var tasksContent = await tasksResponse.Content.ReadAsStringAsync();
                    var tasks = System.Text.Json.JsonSerializer.Deserialize<List<CaseTask>>(tasksContent, jsonOptions) ?? new();
                    caseItem.CaseTasks = tasks;
                    foreach (var task in tasks)
                    {
                        DashboardState.RecentTasks.Add(task);
                        if (task.CompletedAt.HasValue)
                        {
                            DashboardState.RecentActivities.Add(new DashboardState.Activity
                                {
                                    Description = $"Completed task '{task.Title}' in {caseItem.Title}",
                                    Timestamp = task.CompletedAt.Value,
                                    Icon = "fas fa-check-circle"
                                });
                        }
                        else
                        {
                            DashboardState.RecentActivities.Add(new DashboardState.Activity
                                {
                                    Description = $"Assigned task '{task.Title}' in {caseItem.Title}",
                                    Timestamp = task.CreatedAt,
                                    Icon = "fas fa-file-alt"
                                });
                        }
                    }
                }
                else
                {
                    DashboardState.ErrorMessage += $"Warning: Failed to load tasks for case {caseItem.CaseId}. ";
                }

                var docsResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Documents");
                if (docsResponse.IsSuccessStatusCode)
                {
                    var docsContent = await docsResponse.Content.ReadAsStringAsync();
                    var documents = System.Text.Json.JsonSerializer.Deserialize<List<Document>>(docsContent, jsonOptions) ?? new();
                    caseItem.Documents = documents;
                    foreach (var doc in documents)
                    {
                        DashboardState.RecentActivities.Add(new DashboardState.Activity
                            {
                                Description = $"Uploaded document '{doc.Title}' for {caseItem.Title}",
                                Timestamp = doc.UploadedAt,
                                Icon = "fas fa-file-upload"
                            });
                    }
                }
                else
                {
                    DashboardState.ErrorMessage += $"Warning: Failed to load documents for case {caseItem.CaseId}. ";
                }
            }

            DashboardState.RecentActivities = DashboardState.RecentActivities.OrderByDescending(a => a.Timestamp).Take(5).ToList();
            DashboardState.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            DashboardState.ErrorMessage = $"Exception loading data: {ex.Message}";
        }
        finally
        {
            DashboardState.IsLoading = false;
            DashboardState.NotifyStateChanged();
        }
    }

    private async Task TakeCase(int caseId)
    {
        if (!DashboardState.LawyerId.HasValue)
        {
            DashboardState.ErrorMessage = "Error: Lawyer ID not found. Please log in again.";
            DashboardState.NotifyStateChanged();
            return;
        }

        try
        {
            var request = new { LawyerId = DashboardState.LawyerId.Value };
            var response = await Http.PostAsJsonAsync($"/api/Cases/{caseId}/Assign", request);
            if (response.IsSuccessStatusCode)
            {
                var caseItem = DashboardState.Cases.FirstOrDefault(c => c.CaseId == caseId);
                if (caseItem != null)
                {
                    caseItem.LawyerId = DashboardState.LawyerId.Value;
                    caseItem.Status = CaseStatus.Open;
                }
                DashboardState.RecentActivities.Insert(0, new DashboardState.Activity
                    {
                        Description = $"Assigned case '{caseItem?.Title ?? "Case"}' to {DashboardState.LawyerName}",
                        Timestamp = DateTime.Now,
                        Icon = "fas fa-gavel"
                    });
                DashboardState.RecentActivities = DashboardState.RecentActivities.Take(5).ToList();
                DashboardState.NotifyStateChanged();
            }
            else
            {
                DashboardState.ErrorMessage = $"Error assigning case: {await response.Content.ReadAsStringAsync()}";
                DashboardState.NotifyStateChanged();
            }
        }
        catch (Exception ex)
        {
            DashboardState.ErrorMessage = $"Exception assigning case: {ex.Message}";
            DashboardState.NotifyStateChanged();
        }
    }

    private async Task ToggleTaskCompletion(CaseTask task)
    {
        try
        {
            var updatedTask = new
            {
                Title = task.Title,
                Description = task.Description,
                Status = task.Status == "Completed" ? "Pending" : "Completed"
            };
            var response = await Http.PutAsJsonAsync($"/api/cases/{task.CaseId}/CaseTasks/{task.TaskId}", updatedTask);
            if (response.IsSuccessStatusCode)
            {
                task.Status = updatedTask.Status;
                task.CompletedAt = task.Status == "Completed" ? DateTime.Now : null;
                DashboardState.RecentActivities.Insert(0, new DashboardState.Activity
                    {
                        Description = $"{(task.Status == "Completed" ? "Completed" : "Reopened")} task '{task.Title}'",
                        Timestamp = DateTime.Now,
                        Icon = task.Status == "Completed" ? "fas fa-check-circle" : "fas fa-file-alt"
                    });
                DashboardState.RecentActivities = DashboardState.RecentActivities.Take(5).ToList();
                DashboardState.NotifyStateChanged();
            }
            else
            {
                DashboardState.ErrorMessage = $"Error updating task: {await response.Content.ReadAsStringAsync()}";
                DashboardState.NotifyStateChanged();
            }
        }
        catch (Exception ex)
        {
            DashboardState.ErrorMessage = $"Exception updating task: {ex.Message}";
            DashboardState.NotifyStateChanged();
        }
        finally
        {
            DashboardState.NotifyStateChanged();
        }
    }

    private void ShowAllHearings()
    {
        Navigation.NavigateTo("/cases");
    }

    public void Dispose()
    {
        DashboardState.OnChange -= StateHasChanged;
    }
}