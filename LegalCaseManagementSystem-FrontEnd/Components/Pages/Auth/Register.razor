@page "/register"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Net.Http.Json
@using LegalCaseManagementSystem_FrontEnd.Components.Layout

<div class="login-page">
    <div class="grid-container">
        <div class="image-container">
            <img src="/images/law.png" alt="Register page image" />
        </div>
        <div class="login-container">
            <h2>Admin Registration</h2>
            <h3>Create an Administrator Account</h3>

            @if (registrationSuccess)
            {
                <div class="success-message">
                    <i class="fas fa-check-circle"></i>
                    <h4>Registration Successful!</h4>
                    <p>Redirecting to login...</p>
                </div>
            }
            else
            {
                <form @onsubmit="HandleRegistrationAsync">
                    <label for="username">Username</label>
                    <input type="text" id="username" @bind="user.Username" placeholder="Enter your username" required />

                    <label for="email">Email Address</label>
                    <input type="email" id="email" @bind="user.Email" placeholder="Enter your email" required />

                    <label for="password">Password</label>
                    <div class="password-container">
                        <input type="@(showPassword ? "text" : "password")" id="password" @bind="password" placeholder="Enter your password" required />
                        <button type="button" @onclick="TogglePasswordVisibility" class="password-toggle">
                            <i class="@(showPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>


                    <button type="submit" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span><i class="fas fa-spinner fa-spin"></i> Processing...</span>
                        }
                        else
                        {
                            <span>Register Admin</span>
                        }
                    </button>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message" style="color:red">@errorMessage</div>
                    }

                    <h5>Already have an account? <a href="/login">Sign In</a></h5>
                </form>
            }
        </div>
    </div>
</div>

@code {
    private User user = new() { Role = "Admin" };
    private string password = string.Empty;
    private bool registrationSuccess = false;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private bool showPassword = false;
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleRegistrationAsync()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
          
            if (string.IsNullOrWhiteSpace(user.Username))
            {
                errorMessage = "Username is required";
                isLoading = false;
                return;
            }

            if (string.IsNullOrWhiteSpace(user.Email))
            {
                errorMessage = "Email is required";
                isLoading = false;
                return;
            }

            if (string.IsNullOrWhiteSpace(password))
            {
                errorMessage = "Password is required";
                isLoading = false;
                return;
            }

            var newUser = new
            {
                Username = user.Username,
                Email = user.Email,
                Password = password,
                Role = "Admin"
            };

            var response = await Http.PostAsJsonAsync("/api/Users", newUser);

            if (response.IsSuccessStatusCode)
            {
                registrationSuccess = true;
                await Task.Delay(2000); 
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrEmpty(errorMessage))
                {
                    errorMessage = "Registration failed. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Registration error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}