@page "/login"
@using LegalCaseManagementSystem_FrontEnd.Configuration
@using Microsoft.Extensions.Options
@using System.Net.Http.Json
@inject HttpClient Http
@inject IOptions<ApiSettings> ApiSettings
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>LegalCase Management</h2>
            <p>Streamline your legal workflow with our comprehensive case management solution</p>
        </div>

        <div class="login-content">
            @if (isLoggedIn)
            {
                <div class="login-success">
                    <i class="bi bi-check-circle-fill"></i> Login successful! Redirecting...
                </div>
            }
            else
            {
                <h4>Welcome Back!</h4>
                <p class="register-link">Don't have an account? <a href="/register">Create a new account</a>, it's FREE!</p>

                <EditForm Model="loginModel" OnValidSubmit="HandleLoginAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="input-group">
                        <InputText class="form-input" placeholder="Email Address" @bind-Value="loginModel.Username" />
                        <ValidationMessage For="@(() => loginModel.Username)" />
                    </div>

                    <div class="input-group">
                        <InputText type="password" class="form-input" placeholder="Password" @bind-Value="loginModel.Password" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <div class="forgot-password">
                        <a href="/forgot-password">Forgot password?</a>
                    </div>

                    <button class="login-button" type="submit" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-box-arrow-in-right"></i>
                        }
                        Login Now
                    </button>
                </EditForm>

                @if (loginFailed)
                {
                    <div class="login-error">
                        <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
                    </div>
                }
            }
        </div>

        <div class="login-footer">
            © @DateTime.Now.Year LegalCase Management. All rights reserved.
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoggedIn = false;
    private bool loginFailed = false;
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLoginAsync()
    {
        isLoading = true;
        loginFailed = false;

        try
        {
            var apiUrl = ApiSettings.Value?.BaseUrl ?? "https://defaulturl.com/api";
            var response = await Http.PostAsJsonAsync($"{apiUrl}/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponseDTO>();

                if (authResponse != null)
                {
                    // Store token and user info (implement your auth state management)
                    isLoggedIn = true;
                    await Task.Delay(1500); // Show success message briefly
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                errorMessage = errorResponse?.Message ?? "Invalid username or password";
                loginFailed = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            loginFailed = true;
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;

        public string Password { get; set; } = string.Empty;
    }

    public class AuthResponseDTO
    {
        public string Token { get; set; } = string.Empty;
        public DateTime Expiration { get; set; }
        public string Role { get; set; } = string.Empty;
        public int UserId { get; set; }
    }

    public class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}