@page "/login"
@using LegalCaseManagementSystem_FrontEnd.Models.Auth
@using LegalCaseManagementSystem_FrontEnd.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="login-page">
    <div class="grid-container">
        <div class="image-container">
            <img src="/images/weightscale.png" alt="Login page image" />
        </div>
        <div class="login-container">
            <h2>Sign In</h2>
            <h3>Welcome Mate</h3>

            <label for="username">Username</label>
            <input type="text" @bind="loginModel.Username" id="username" placeholder="Enter your username" required />

            <label for="password">Password</label>
            <input type="password" @bind="loginModel.Password" id="password" placeholder="Enter your password" required />

            <button @onclick="HandleLogin">Login</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message" style="color:red">@errorMessage</div>
            }

            <h5>Don't have an account? <a href="/register">Sign Up</a></h5>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;

        try
        {
            // Basic validation
            if (string.IsNullOrWhiteSpace(loginModel.Username))
            {
                errorMessage = "Username is required";
                return;
            }

            if (string.IsNullOrWhiteSpace(loginModel.Password))
            {
                errorMessage = "Password is required";
                return;
            }

            Console.WriteLine($"Attempting login with username: {loginModel.Username}");

            // Call AuthService to handle the login API request
            var authResponse = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (authResponse?.Token != null)
            {
                // Store token and user details in AuthService
                AuthService.SetAuthToken(authResponse.Token, authResponse.Role, authResponse.UserId);

                Console.WriteLine($"Login successful. Role: {authResponse.Role}, UserId: {authResponse.UserId}");

                // Navigate based on role
                switch (authResponse.Role.ToLower())
                {
                    case "admin":
                        Navigation.NavigateTo("/dashboard");
                        break;
                    case "client":
                        Navigation.NavigateTo("/client");
                        break;
                    case "lawyer":
                        Navigation.NavigateTo("/lawyer-dashboard");
                        break;
                    default:
                        errorMessage = "Unknown user role";
                        AuthService.ClearAuthToken();
                        break;
                }
            }
            else
            {
                errorMessage = "Invalid response from server";
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP Request Exception: {httpEx.Message}");
            errorMessage = "Unable to connect to server. Please check your connection.";
            AuthService.ClearAuthToken();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.ToString()}");
            errorMessage = $"Login failed: {ex.Message}";
            AuthService.ClearAuthToken();
        }
    }
}