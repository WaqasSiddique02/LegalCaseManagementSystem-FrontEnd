@page "/update-password"
@using LegalCaseManagementSystem_FrontEnd.Models.Auth
@using LegalCaseManagementSystem_FrontEnd.Services
@inject AuthService AuthService
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="update-password-page">
    <div class="grid-container">
        <div class="image-container">
            <img src="/images/weightscale.png" alt="Update password page image" />
        </div>
        <div class="update-password-container">
            <h2>Update Password</h2>
            <h3>Secure Your Account</h3>

            <label for="username">Username</label>
            <input type="text" @bind="updatePasswordModel.Username" id="username" placeholder="Enter your username" required />

            <label for="newPassword">New Password</label>
            <div class="password-container">
                <input type="@(showNewPassword ? "text" : "password")" @bind="updatePasswordModel.NewPassword" id="newPassword" placeholder="Enter your new password" required />
                <button type="button" @onclick="ToggleNewPasswordVisibility" class="password-toggle">
                    <i class="@(showNewPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                </button>
            </div>

            <label for="confirmPassword">Confirm Password</label>
            <div class="password-container">
                <input type="@(showConfirmPassword ? "text" : "password")" @bind="updatePasswordModel.ConfirmPassword" id="confirmPassword" placeholder="Confirm your new password" required />
                <button type="button" @onclick="ToggleConfirmPasswordVisibility" class="password-toggle">
                    <i class="@(showConfirmPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                </button>
            </div>

            <button @onclick="HandleUpdatePassword">Update Password</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message" style="color:red">@errorMessage</div>
            }

            <h5>Back to <a href="/login">Sign In</a></h5>
        </div>
    </div>
</div>

@code {
    private UpdatePasswordModel updatePasswordModel = new UpdatePasswordModel();
    private string errorMessage = string.Empty;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    private void ToggleNewPasswordVisibility()
    {
        showNewPassword = !showNewPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private async Task HandleUpdatePassword()
    {
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(updatePasswordModel.Username))
            {
                errorMessage = "Username is required";
                return;
            }

            if (string.IsNullOrWhiteSpace(updatePasswordModel.NewPassword))
            {
                errorMessage = "New password is required";
                return;
            }

            if (string.IsNullOrWhiteSpace(updatePasswordModel.ConfirmPassword))
            {
                errorMessage = "Confirm password is required";
                return;
            }

            if (updatePasswordModel.NewPassword != updatePasswordModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match";
                return;
            }

            if (!AuthService.IsAuthenticated())
            {
                errorMessage = "You must be logged in to update your password";
                Navigation.NavigateTo("/login");
                return;
            }

            var request = new
            {
                Username = updatePasswordModel.Username,
                Password = updatePasswordModel.NewPassword
            };

            HttpClient.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AuthService.GetToken());

            var response = await HttpClient.PostAsJsonAsync("/api/Auth/login", request);

            Console.WriteLine($"Response status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                if (authResponse?.Token != null)
                {
                    AuthService.SetAuthToken(authResponse.Token, authResponse.Role, authResponse.UserId);
                    Console.WriteLine($"Password update simulated. New token received. Role: {authResponse.Role}, UserId: {authResponse.UserId}");

                    switch (authResponse.Role.ToLower())
                    {
                        case "admin":
                            Navigation.NavigateTo("/dashboard");
                            break;
                        case "client":
                            Navigation.NavigateTo($"/client/{authResponse.UserId}");
                            break;
                        case "lawyer":
                            Navigation.NavigateTo($"/lawyer/{authResponse.UserId}");
                            break;
                        default:
                            errorMessage = "Unknown user role";
                            AuthService.ClearAuthToken();
                            break;
                    }
                }
                else
                {
                    errorMessage = "Invalid response from server";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error response: {errorContent}");
                errorMessage = "Failed to update password. Please try again.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP Request Exception: {httpEx.Message}");
            errorMessage = "Unable to connect to server. Please check your connection.";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.ToString()}");
            errorMessage = $"Update failed: {ex.Message}";
        }
        finally
        {
            HttpClient.DefaultRequestHeaders.Authorization = null;
        }
    }

    public class UpdatePasswordModel
    {
        public string Username { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}