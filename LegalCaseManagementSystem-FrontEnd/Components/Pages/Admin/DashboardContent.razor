@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json
@using System.Text.Json.Serialization

<main role="main" class="col-md-9 ml-sm-auto col-lg-10 my-3">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
    else
    {
        <div class="card-list">
            <div class="row">
                <div class="col-12 col-md-6 col-lg-4 col-xl-3 mb-4">
                    <div class="card blue">
                        <div class="title">All Cases</div>
                        <div class="value">@cases.Count</div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-4 col-xl-3 mb-4">
                    <div class="card green">
                        <div class="title">Open Cases</div>
                        <div class="value">@cases.Count(c => c.Status == CaseStatus.Open)</div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-4 col-xl-3 mb-4">
                    <div class="card orange">
                        <div class="title">Pending Cases</div>
                        <div class="value">@cases.Count(c => c.Status == CaseStatus.Pending)</div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-4 col-xl-3 mb-4">
                    <div class="card red">
                        <div class="title">Closed Cases</div>
                        <div class="value">@cases.Count(c => c.Status == CaseStatus.Closed)</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="projects mb-4">
            <div class="projects-inner">
                <header class="projects-header">
                    <div class="title">Recent Cases</div>
                    <div class="count">| @recentCases.Count Cases</div>
                </header>
                @if (recentCases.Any())
                {
                    <table class="projects-table">
                        <thead>
                            <tr>
                                <th>Case</th>
                                <th>Hearing Date</th>
                                <th>Client</th>
                                <th>Lawyer</th>
                                <th>Status</th>
                                <th class="text-right">Created At</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var caseItem in recentCases)
                            {
                                var hearing = caseHearings.FirstOrDefault(h => h.CaseId == caseItem.CaseId);
                                var client = clients.FirstOrDefault(c => c.ClientId == caseItem.ClientId);
                                var lawyer = lawyers.FirstOrDefault(l => l.LawyerId == caseItem.LawyerId);

                                <tr>
                                    <td>
                                        <p>@caseItem.Title</p>
                                    </td>
                                    <td>
                                        @if (hearing != null && hearing.HearingDate != default)
                                        {
                                            <p>@hearing.HearingDate.ToString("dd MMM, yy")</p>
                                            @if (hearing.HearingDate < DateTime.Now)
                                            {
                                                <p class="text-danger">Overdue</p>
                                            }
                                        }
                                        else
                                        {
                                            <p>No hearing scheduled</p>
                                        }
                                    </td>
                                    <td>
                                        <p>@(client?.FullName ?? "Unknown")</p>
                                    </td>
                                    <td>
                                        <div class="member-info">
                                            <p>@(lawyer?.FullName ?? "Unknown")</p>
                                        </div>
                                    </td>
                                    <td class="status">
                                        @{
                                            var statusClass = caseItem.Status switch
                                            {
                                                CaseStatus.Pending => "status-red",
                                                CaseStatus.Open => "status-orange",
                                                CaseStatus.Closed => "status-green",
                                                _ => "status-blue"
                                            };
                                        }
                                        <span class="status-text @statusClass">@caseItem.Status</span>
                                    </td>
                                    <td>
                                        <p>@caseItem.StartDate.ToString("dd-MM-yyyy")</p>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-info">
                        No recent cases found.
                    </div>
                }
            </div>
        </div>

        <div class="chart-data">
            <div class="row">
                <div class="col-12 col-md-4">
                    <div class="chart radar-chart dark">
                        <h3 class="title">Pending Cases</h3>
                        <p class="tagline">Current Year</p>
                        @if (cases.Any(c => c.Status == CaseStatus.Pending))
                        {
                            <div class="case-list">
                                @foreach (var caseItem in cases.Where(c => c.Status == CaseStatus.Pending).Take(5))
                                {
                                    var client = clients.FirstOrDefault(c => c.ClientId == caseItem.ClientId);
                                    <div class="case-item">
                                        <strong>@caseItem.Title</strong>
                                        <span>Client: @(client?.FullName ?? "Unknown")</span>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">No pending cases found</div>
                        }
                    </div>
                </div>
                <div class="col-12 col-md-4">
                    <div class="chart bar-chart light">
                        <h3 class="title">Closed Cases</h3>
                        <p class="tagline">Distribution</p>
                        @if (cases.Any(c => c.Status == CaseStatus.Closed))
                        {
                            <div class="case-list">
                                @foreach (var caseItem in cases.Where(c => c.Status == CaseStatus.Closed).Take(5))
                                {
                                    var client = clients.FirstOrDefault(c => c.ClientId == caseItem.ClientId);
                                    <div class="case-item">
                                        <strong>@caseItem.Title</strong>
                                        <span>Client: @(client?.FullName ?? "Unknown")</span>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">No closed cases found</div>
                        }
                    </div>
                </div>
                <div class="col-12 col-md-4">
                    <div class="chart doughnut-chart dark">
                        <h3 class="title">All Cases</h3>
                        <p class="tagline">Current</p>
                        @if (cases.Any())
                        {
                            <div class="case-list">
                                @foreach (var caseItem in cases.Take(5))
                                {
                                    var client = clients.FirstOrDefault(c => c.ClientId == caseItem.ClientId);
                                    <div class="case-item">
                                        <strong>@caseItem.Title</strong>
                                        <span>Client: @(client?.FullName ?? "Unknown")</span>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">No cases found</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</main>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private bool isLoading = true;
    private string? errorMessage;
    private List<Case> cases = [];
    private List<Case> recentCases = [];
    private List<Client> clients = [];
    private List<Lawyer> lawyers = [];
    private List<Hearing> caseHearings = [];

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Fetch cases, clients, and lawyers in parallel
            var casesTask = Http.GetFromJsonAsync<List<Case>>("/api/Cases", jsonOptions);
            var clientsTask = Http.GetFromJsonAsync<List<Client>>("/api/Clients", jsonOptions);
            var lawyersTask = Http.GetFromJsonAsync<List<Lawyer>>("/api/Lawyers", jsonOptions);

            await Task.WhenAll(casesTask, clientsTask, lawyersTask);

            cases = casesTask.Result ?? [];
            clients = clientsTask.Result ?? [];
            lawyers = lawyersTask.Result ?? [];

            // Select recent cases (last 5 by StartDate)
            recentCases = cases
                .OrderByDescending(c => c.StartDate)
                .Take(5)
                .ToList();

            // Fetch hearings for recent cases only
            if (recentCases.Any())
            {
                var hearingTasks = recentCases
                    .Select(c => Http.GetFromJsonAsync<List<Hearing>>($"/api/Cases/{c.CaseId}/Hearings", jsonOptions))
                    .Take(5)
                    .ToList();
                var hearingsResults = await Task.WhenAll(hearingTasks);
                caseHearings = hearingsResults
                    .SelectMany(h => h ?? [])
                    .Take(5)
                    .ToList();
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Failed to fetch data from API: {ex.Message}";
            Console.WriteLine($"HTTP error: {ex}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading dashboard data: {ex.Message}";
            Console.WriteLine($"Exception: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}