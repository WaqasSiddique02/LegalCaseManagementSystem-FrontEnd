@page "/users-management"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using LegalCaseManagementSystem_FrontEnd.Components.Layout
@using LegalCaseManagementSystem_FrontEnd.Models

<Navbar />
<NavMenu />
<div class="client-management-container">
    <h3>Users Management</h3>

    <div class="management-actions mb-4">
        <div class="row align-items-center">
            <div class="col-md-6 mb-3 mb-md-0">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" class="form-control" placeholder="Search users..." @bind="searchTerm" @bind:event="oninput" />
                </div>
            </div>
            <div class="col-md-6 mb-3 mb-md-0">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-filter"></i>
                    </span>
                    <select class="form-select" @bind="selectedRole">
                        <option value="">All</option>
                        <option value="Admin">Admin</option>
                        <option value="Lawyer">Lawyer</option>
                        <option value="Client">Client</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-dark table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">Username</th>
                        <th scope="col">Email</th>
                        <th scope="col">Role</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in FilteredUsers)
                    {
                        <tr>
                            <td>@user.Username</td>
                            <td>@user.Email</td>
                            <td>
                                <span class="badge @(GetRoleBadgeClass(user.Role))">
                                    @user.Role
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-danger btn-sm" title="Delete User" @onclick="() => ShowDeleteModal(user)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal)
    {
        <div class="modal-backdrop show"></div>
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete user <strong>@currentUser.Username</strong>?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteUser">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<User> users = new();
    private string searchTerm = string.Empty;
    private string selectedRole = string.Empty;
    private bool isLoading = false;
    private string? errorMessage;
    private bool showDeleteModal = false;
    private User currentUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private List<User> FilteredUsers => users
        .Where(u => (string.IsNullOrEmpty(selectedRole) || u.Role == selectedRole) &&
                    (string.IsNullOrEmpty(searchTerm) ||
                     u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     u.Role.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        .ToList();

    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "badge-admin",
            "Lawyer" => "badge-lawyer",
            "Client" => "badge-client",
            "Staff" => "badge-staff",
            _ => "badge-secondary"
        };
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await Http.GetAsync("/api/Users");
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading users: {response.StatusCode}";
                isLoading = false;
                return;
            }

            users = await response.Content.ReadFromJsonAsync<List<User>>() ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading users: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowDeleteModal(User user)
    {
        currentUser = user;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        currentUser = new();
    }

    private async Task DeleteUser()
    {
        try
        {
            var response = await Http.DeleteAsync($"/api/Users/{currentUser.UserId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                showDeleteModal = false;
            }
            else
            {
                errorMessage = $"Error deleting user: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception deleting user: {ex.Message}";
        }
        finally
        {
            showDeleteModal = false;
            currentUser = new();
            StateHasChanged();
        }
    }
}