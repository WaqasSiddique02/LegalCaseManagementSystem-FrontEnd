@page "/case-management"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using LegalCaseManagementSystem_FrontEnd.Components.Layout
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json
@using System.Text.Json.Serialization

<Navbar />
<NavMenu />
<div class="client-management-container">
    <h3>Case Management</h3>

    <div class="management-actions mb-4">
        <div class="row align-items-center">
            <div class="col-md-4 mb-3 mb-md-0">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" class="form-control" placeholder="Search cases..." @bind="searchTerm" @bind:event="oninput" />
                </div>
            </div>
            <div class="col-md-4 mb-3 mb-md-0">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-filter"></i>
                    </span>
                    <select class="form-select" @bind="selectedStatus">
                        <option value="">All</option>
                        <option value="Open">Open</option>
                        <option value="Pending">Pending</option>
                        <option value="Closed">Closed</option>
                    </select>
                </div>
            </div>
            <div class="col-md-4 text-md-end">
                <button class="btn btn-primary" @onclick="ShowAddModal">
                    <i class="bi bi-plus-circle me-2"></i>Add New Case
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-dark table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">Case ID</th>
                        <th scope="col">Title</th>
                        <th scope="col">Description</th>
                        <th scope="col">Status</th>
                        <th scope="col">Start Date</th>
                        <th scope="col">Client</th>
                        <th scope="col">Lawyer</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var caseItem in FilteredCases)
                    {
                        <tr>
                            <td>@caseItem.CaseId</td>
                            <td>@caseItem.Title</td>
                            <td style="width: 20%; height: 5%; overflow-y:auto; word-wrap: break-word;">@caseItem.Description</td>
                            <td>
                                <span class="badge @(GetStatusBadgeClass(caseItem.Status))">
                                    @caseItem.Status
                                </span>
                            </td>
                            <td>@caseItem.StartDate.ToString("g")</td>
                            <td>@(caseItem.Client?.FullName ?? caseItem.ClientId.ToString())</td>
                            <td>@(caseItem.Lawyer?.FullName ?? caseItem.LawyerId.ToString())</td>
                            <td>
                                <button class="btn btn-warning btn-sm me-2" title="Edit Case" @onclick="() => ShowEditModal(caseItem)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-danger btn-sm me-2" title="Delete Case" @onclick="() => ShowDeleteModal(caseItem)">
                                    <i class="bi bi-trash"></i>
                                </button>
                                <a class="btn btn-primary btn-sm" href="/case-tasks/@caseItem.CaseId" title="View Tasks">
                                    <i class="bi bi-list-task"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Add/Edit Modal -->
@if (showModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit Case" : "Add New Case")</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <input type="text" class="form-control" @bind="currentCase.Title" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="4" @bind="currentCase.Description" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-select" @bind="currentCase.Status" required>
                            <option value="@CaseStatus.Open">Open</option>
                            <option value="@CaseStatus.Pending">Pending</option>
                            <option value="@CaseStatus.Closed">Closed</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Start Date</label>
                        <input type="datetime-local" class="form-control" @bind="currentCase.StartDate" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Client</label>
                        <select class="form-select" @bind="currentCase.ClientId" required>
                            <option value="0" disabled selected>Select a client</option>
                            @foreach (var client in clients)
                            {
                                <option value="@client.ClientId">@client.FullName</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Lawyer</label>
                        <select class="form-select" @bind="currentCase.LawyerId" required>
                            <option value="0" disabled selected>Select a lawyer</option>
                            @foreach (var lawyer in lawyers)
                            {
                                <option value="@lawyer.LawyerId">@lawyer.FullName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveCase">
                        @(isEditing ? "Update" : "Create")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete case <strong>@currentCase.Title</strong>?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteCase">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<Case> cases = new();
    private List<Client> clients = new();
    private List<Lawyer> lawyers = new();
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditing = false;
    private bool isLoading = false;
    private string? errorMessage;

    private Case currentCase = new();

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private List<Case> FilteredCases => cases
        .Where(c => (string.IsNullOrEmpty(selectedStatus) || c.Status.ToString() == selectedStatus) &&
                    (string.IsNullOrEmpty(searchTerm) ||
                     c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     c.Status.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                     (c.Client?.FullName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                     (c.Lawyer?.FullName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)))
        .ToList();

    private string GetStatusBadgeClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "badge-open",
            CaseStatus.Closed => "badge-closed",
            CaseStatus.Pending => "badge-pending",
            _ => "badge-secondary"
        };
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // Fetch cases
            var caseResponse = await Http.GetAsync("/api/Cases");
            if (!caseResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {caseResponse.StatusCode}";
                isLoading = false;
                return;
            }
            var caseContent = await caseResponse.Content.ReadAsStringAsync();
            cases = JsonSerializer.Deserialize<List<Case>>(caseContent, jsonOptions) ?? new();

            // Fetch clients
            var clientResponse = await Http.GetAsync("/api/Clients");
            if (!clientResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading clients: {clientResponse.StatusCode}";
                isLoading = false;
                return;
            }
            clients = await clientResponse.Content.ReadFromJsonAsync<List<Client>>() ?? new();

            // Fetch lawyers
            var lawyerResponse = await Http.GetAsync("/api/Lawyers");
            if (!lawyerResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading lawyers: {lawyerResponse.StatusCode}";
                isLoading = false;
                return;
            }
            lawyers = await lawyerResponse.Content.ReadFromJsonAsync<List<Lawyer>>() ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception loading data: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowAddModal()
    {
        currentCase = new Case
            {
                StartDate = DateTime.Now,
                Status = CaseStatus.Open // Default to Open for new cases
            };
        isEditing = false;
        showModal = true;
    }

    private void ShowEditModal(Case caseItem)
    {
        currentCase = new Case
            {
                CaseId = caseItem.CaseId,
                Title = caseItem.Title,
                Description = caseItem.Description,
                Status = caseItem.Status,
                StartDate = caseItem.StartDate,
                ClientId = caseItem.ClientId,
                LawyerId = caseItem.LawyerId
            };
        isEditing = true;
        showModal = true;
    }

    private void ShowDeleteModal(Case caseItem)
    {
        currentCase = caseItem;
        showDeleteModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task SaveCase()
    {
        try
        {
            var caseToSave = new
            {
                Title = currentCase.Title,
                Description = currentCase.Description,
                Status = currentCase.Status.ToString(),
                StartDate = currentCase.StartDate.ToUniversalTime().ToString("O"),
                ClientId = currentCase.ClientId,
                LawyerId = currentCase.LawyerId
            };

            if (isEditing)
            {
                var response = await Http.PutAsJsonAsync($"/api/Cases/{currentCase.CaseId}", caseToSave);
                if (response.IsSuccessStatusCode)
                {
                    await LoadData();
                    showModal = false;
                }
                else
                {
                    errorMessage = $"Error updating case: {await response.Content.ReadAsStringAsync()}";
                }
            }
            else
            {
                var response = await Http.PostAsJsonAsync("/api/Cases", caseToSave);
                if (response.IsSuccessStatusCode)
                {
                    await LoadData();
                    showModal = false;
                }
                else
                {
                    errorMessage = $"Error creating case: {await response.Content.ReadAsStringAsync()}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception saving case: {ex.Message}";
        }
    }

    private async Task DeleteCase()
    {
        try
        {
            var response = await Http.DeleteAsync($"/api/Cases/{currentCase.CaseId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
                showDeleteModal = false;
            }
            else
            {
                errorMessage = $"Error deleting case: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception deleting case: {ex.Message}";
        }
    }
}