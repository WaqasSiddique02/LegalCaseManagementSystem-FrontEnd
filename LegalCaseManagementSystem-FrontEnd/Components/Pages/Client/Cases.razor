@page "/client/{userId:int}/cases"
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<ClientHeader></ClientHeader>

<div class="dashboard-grid">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="content-card">
            <div class="card-header">
                <h3>All Cases</h3>
                <div class="d-flex align-items-center gap-2">
                    <select class="form-select form-select-sm" @onchange="FilterCases">
                        <option value="All">All</option>
                        <option value="Open">Open</option>
                        <option value="Closed">Closed</option>
                    </select>
                    <a href="/client/@UserId" class="btn btn-primary btn-sm">Back to Dashboard</a>
                </div>
            </div>
            <div class="card-body">
                @if (filteredCases.Any())
                {
                    <div class="case-grid">
                        @foreach (var caseItem in filteredCases.OrderByDescending(c => c.StartDate))
                        {
                            <div class="case-card">
                                <div class="case-card-header">
                                    <h4>@caseItem.Title</h4>
                                    <span class="badge @GetStatusBadgeClass(caseItem.Status)">
                                        @caseItem.Status
                                    </span>
                                </div>
                                <div class="case-card-body">
                                    <div class="case-info">
                                        <p><strong>Lawyer:</strong> @lawyers.GetValueOrDefault(caseItem.LawyerId)?.FullName</p>
                                        <p><strong>Start Date:</strong> @caseItem.StartDate.ToString("MMM dd, yyyy")</p>
                                    </div>
                                    <div class="case-actions">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewCase(caseItem.CaseId)">
                                            <i class="fas fa-eye"></i> View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-info" role="alert">
                        No cases found for this client
                    </div>
                }
            </div>
        </div>
    }
</div>


@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    [Parameter]
    public int UserId { get; set; }

    private User? user;
    private Client? client;
    private List<Case> cases = new();
    private List<Case> filteredCases = new();
    private Dictionary<int, Lawyer> lawyers = new();
    private bool isLoading = true;
    private string? errorMessage;
    private string filterStatus = "All";

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userResponse = await Http.GetAsync($"/api/Users/{UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                isLoading = false;
                return;
            }
            user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);

            var clientsResponse = await Http.GetAsync($"/api/Clients?userId={UserId}");
            if (!clientsResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading client: {clientsResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var clients = await clientsResponse.Content.ReadFromJsonAsync<List<Client>>(jsonOptions);
            client = clients?.FirstOrDefault();

            if (client == null)
            {
                errorMessage = "No client found for this user";
                isLoading = false;
                return;
            }

            var casesResponse = await Http.GetAsync($"/api/Cases?clientId={client.UserId}");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                isLoading = false;
                return;
            }

            cases = await casesResponse.Content.ReadFromJsonAsync<List<Case>>(jsonOptions) ?? new List<Case>();
            filteredCases = cases;

            var tasks = new List<Task>();
            foreach (var caseItem in cases)
            {
                if (!lawyers.ContainsKey(caseItem.LawyerId))
                {
                    tasks.Add(LoadLawyer(caseItem.LawyerId));
                }
            }
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadLawyer(int lawyerId)
    {
        try
        {
            var lawyerResponse = await Http.GetAsync($"/api/Lawyers/{lawyerId}");
            if (lawyerResponse.IsSuccessStatusCode)
            {
                var lawyer = await lawyerResponse.Content.ReadFromJsonAsync<Lawyer>(jsonOptions);
                if (lawyer != null)
                {
                    lawyers[lawyerId] = lawyer;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lawyer {lawyerId}: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "bg-primary",
            CaseStatus.Closed => "bg-secondary",
            CaseStatus.Pending => "bg-warning",
            CaseStatus.Active => "bg-success",
            CaseStatus.Completed => "bg-info",
            CaseStatus.InProgress => "bg-primary",
            _ => "bg-light text-dark"
        };
    }

    private void FilterCases(ChangeEventArgs e)
    {
        filterStatus = e.Value?.ToString() ?? "All";
        filteredCases = filterStatus == "All"
            ? cases
            : cases.Where(c => c.Status.ToString() == filterStatus).ToList();
        StateHasChanged();
    }


    private void ViewCase(int caseId)
    {
        Navigation.NavigateTo($"/client/{UserId}/cases/{caseId}");
    }
}