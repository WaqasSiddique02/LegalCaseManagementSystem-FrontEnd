@page "/clnt"
@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services
@inject IHttpClientFactory HttpClientFactory
@inject DashboardState DashboardState
@inject NavigationManager Navigation
@implements IDisposable

<div class="client-dashboard">
    @if (DashboardState.IsLoading)
    {
        <div class="loading">Loading...</div>
    }
    else if (!string.IsNullOrEmpty(DashboardState.ErrorMessage))
    {
        <div class="error">@DashboardState.ErrorMessage</div>
    }
    else
    {
        <div class="cases-section">
            <h3>My Cases (@(DashboardState.Cases?.Count ?? 0))</h3>
            @if (DashboardState.Cases != null && DashboardState.Cases.Any())
            {
                <ul class="case-list">
                    @foreach (var caseItem in DashboardState.Cases)
                    {
                        <li class="case-item">
                            <span>@caseItem.Title</span>
                            <span class="status @(caseItem.Status.ToString().ToLowerInvariant())">
                                @(caseItem.Status.ToString())
                            </span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No cases assigned yet.</p>
            }
        </div>

        <div class="hearings-section">
            <h3>Upcoming Hearings</h3>
            @if (DashboardState.UpcomingHearings != null && DashboardState.UpcomingHearings.Any())
            {
                <ul class="hearing-list">
                    @foreach (var hearing in DashboardState.UpcomingHearings.OrderBy(h => h.HearingDate).Take(3))
                    {
                        <li class="hearing-item">
                            <span>@hearing.HearingDate.ToString("MMM dd, yyyy h:mm tt")</span>
                            <span>@(hearing.Case?.Title ?? "N/A")</span>
                            @if (!string.IsNullOrEmpty(hearing.Venue))
                            {
                                <span>@hearing.Venue</span>
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No upcoming hearings.</p>
            }
        </div>
    }
</div>

<style>
    .client-dashboard {
        padding: 2rem;
        max-width: 800px;
        margin: 0 auto;
    }

    .loading, .error {
        text-align: center;
        padding: 1rem;
        color: var(--text-color);
    }

    .error {
        color: var(--danger);
    }

    .cases-section, .hearings-section {
        margin-bottom: 2rem;
    }

        .cases-section h3, .hearings-section h3 {
            margin-bottom: 1rem;
            color: var(--text-color);
        }

    .case-list, .hearing-list {
        list-style: none;
        padding: 0;
    }

    .case-item, .hearing-item {
        padding: 0.75rem;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .case-item .status {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

            .case-item .status.open {
                background-color: rgba(var(--primary), 0.1);
                color: var(--primary);
            }

            .case-item .status.closed {
                background-color: rgba(var(--success), 0.1);
                color: var(--success);
            }

            .case-item .status.pending {
                background-color: rgba(var(--warning), 0.1);
                color: var(--warning);
            }

            .case-item .status.unknown {
                background-color: rgba(var(--text-muted), 0.1);
                color: var(--text-muted);
            }

        .hearing-item span {
            margin-right: 1rem;
        }
</style>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private Client? Client { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadClientData();
        DashboardState.OnChange += StateHasChanged;
    }

    private async Task LoadClientData()
    {
        DashboardState.IsLoading = true;
        DashboardState.ErrorMessage = null;

        try
        {
            var clientsResponse = await Http.GetAsync("/api/Clients");
            if (!clientsResponse.IsSuccessStatusCode)
            {
                DashboardState.ErrorMessage = $"Error loading clients: {clientsResponse.StatusCode}";
                return;
            }

            var clientsContent = await clientsResponse.Content.ReadAsStringAsync();
            var clients = System.Text.Json.JsonSerializer.Deserialize<List<Client>>(clientsContent, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            if (clients == null || !clients.Any())
            {
                DashboardState.ErrorMessage = "No clients found";
                return;
            }

            Client = clients.First();

            var casesResponse = await Http.GetAsync("/api/Cases");
            if (!casesResponse.IsSuccessStatusCode)
            {
                DashboardState.ErrorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                return;
            }

            var casesContent = await casesResponse.Content.ReadAsStringAsync();
            var jsonOptions = new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    Converters = { new CaseStatusJsonConverter() }
                };
            DashboardState.Cases = System.Text.Json.JsonSerializer.Deserialize<List<Case>>(casesContent, jsonOptions) ?? new List<Case>();

            DashboardState.UpcomingHearings = new List<Hearing>();
            foreach (var caseItem in DashboardState.Cases)
            {
                var hearingsResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Hearings");
                if (hearingsResponse.IsSuccessStatusCode)
                {
                    var hearingsContent = await hearingsResponse.Content.ReadAsStringAsync();
                    var hearings = System.Text.Json.JsonSerializer.Deserialize<List<Hearing>>(hearingsContent, new System.Text.Json.JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        }) ?? new List<Hearing>();

                    DashboardState.UpcomingHearings.AddRange(
                        hearings.Where(h => h.HearingDate >= DateTime.Now)
                               .OrderBy(h => h.HearingDate)
                               .Take(3)
                    );
                }
            }

            DashboardState.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            DashboardState.ErrorMessage = $"Exception loading data: {ex.Message}";
        }
        finally
        {
            DashboardState.IsLoading = false;
            DashboardState.NotifyStateChanged();
        }
    }

    public void Dispose()
    {
        DashboardState.OnChange -= StateHasChanged;
    }

    private class CaseStatusJsonConverter : System.Text.Json.Serialization.JsonConverter<CaseStatus>
    {
        public override CaseStatus Read(ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            if (reader.TokenType == System.Text.Json.JsonTokenType.Null)
            {
                return CaseStatus.Pending; // Default for null
            }

            if (reader.TokenType == System.Text.Json.JsonTokenType.Number)
            {
                if (reader.TryGetInt32(out int value))
                {
                    if (Enum.IsDefined(typeof(CaseStatus), value))
                    {
                        return (CaseStatus)value;
                    }
                }
                return CaseStatus.Pending;
            }

            if (reader.TokenType == System.Text.Json.JsonTokenType.String)
            {
                string? value = reader.GetString();
                if (string.IsNullOrEmpty(value))
                {
                    return CaseStatus.Pending; 
                }

                if (Enum.TryParse<CaseStatus>(value, ignoreCase: true, out var result))
                {
                    return result;
                }

                return value.ToLowerInvariant() switch
                {
                    "open" => CaseStatus.Open,
                    "closed" => CaseStatus.Closed,
                    "pending" => CaseStatus.Pending,
                    _ => CaseStatus.Pending
                };
            }

            return CaseStatus.Pending;
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, CaseStatus value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString());
        }
    }
}