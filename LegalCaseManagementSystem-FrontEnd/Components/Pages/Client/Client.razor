@page "/client/{userId:int}"
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<ClientHeader></ClientHeader>

    <div class="stats-grid">
        <div class="stat-card" style="--card-color: var(--primary)">
            <div class="stat-icon">
                <i class="fas fa-gavel"></i>
            </div>
            <div class="stat-info">
                <h3>@activeCasesCount</h3>
                <p>Active Cases</p>
                <span class="stat-trend positive">
                    <i class="fas fa-arrow-up"></i>
                    @(cases.Count > 0 ? "Ongoing" : "None")
                </span>
            </div>
        </div>

        <div class="stat-card" style="--card-color: var(--warning)">
            <div class="stat-icon">
                <i class="fas fa-calendar-alt"></i>
            </div>
            <div class="stat-info">
                <h3>@upcomingHearingsCount</h3>
                <p>Upcoming Hearings</p>
                <span class="stat-trend">
                    <i class="fas fa-calendar"></i>
                    Next: @(nextHearingDate != null ? nextHearingDate.Value.ToString("MMM dd") : "None")
                </span>
            </div>
        </div>

        <div class="stat-card" style="--card-color: var(--danger)">
            <div class="stat-icon">
                <i class="fas fa-file-invoice-dollar"></i>
            </div>
            <div class="stat-info">
                <h3>@unpaidInvoicesCount</h3>
                <p>Unpaid Invoices</p>
                <span class="stat-trend negative">
                    <i class="fas fa-exclamation-circle"></i>
                    @(unpaidInvoicesCount > 0 ? "Pending" : "All Paid")
                </span>
            </div>
        </div>
    </div>

    <div class="dashboard-grid">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        else
        {
            <div class="content-card">
                <div class="card-header">
                    <h3>Recent Cases</h3>
                    <button class="btn btn-primary btn-sm" @onclick="NavigateToCases">
                        View All
                    </button>
                </div>
                <div class="card-body">
                    @if (cases.Any())
                    {
                        <div class="case-grid">
                            @foreach (var caseItem in cases.OrderByDescending(c => c.StartDate).Take(5))
                            {
                                <div class="case-card">
                                    <div class="case-card-header">
                                        <h4>@caseItem.Title</h4>
                                        <span class="badge @GetStatusBadgeClass(caseItem.Status)">
                                            @caseItem.Status
                                        </span>
                                    </div>
                                    <div class="case-card-body">
                                        <div class="case-info">
                                            <p><strong>Lawyer:</strong> @lawyers.GetValueOrDefault(caseItem.LawyerId)?.FullName</p>
                                            <p><strong>Start Date:</strong> @caseItem.StartDate.ToString("MMM dd, yyyy")</p>
                                        </div>
                                        <div class="case-actions">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewCase(caseItem.CaseId)">
                                                <i class="fas fa-eye"></i> View Details
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            No cases found for this client
                        </div>
                    }
                </div>
            </div>

            <div class="content-card">
                <div class="card-header">
                    <h3>Recent Invoices</h3>
                    <button class="btn btn-primary btn-sm" @onclick="NavigateToInvoices">
                        View All
                    </button>
                </div>
                <div class="card-body">
                    @if (recentInvoices.Any())
                    {
                        <div class="invoice-grid">
                            @foreach (var invoice in recentInvoices.OrderByDescending(i => i.IssuedDate).Take(5))
                            {
                                <div class="invoice-card">
                                    <div class="invoice-card-header">
                                        <h4>Invoice #@invoice.InvoiceId</h4>
                                        <span class="badge @GetInvoiceStatusBadge(invoice.Status)">
                                            @invoice.Status
                                        </span>
                                    </div>
                                    <div class="invoice-card-body">
                                        <div class="invoice-info">
                                            <p><strong>Case:</strong> @(cases.FirstOrDefault(c => c.CaseId == invoice.CaseId)?.Title)</p>
                                            <p><strong>Amount:</strong> @invoice.Amount.ToString("C")</p>
                                            <p><strong>Due Date:</strong> @invoice.IssuedDate.ToString("MMM dd, yyyy")</p>
                                        </div>
                                        <div class="invoice-actions">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewInvoice(invoice.InvoiceId)">
                                                <i class="fas fa-eye"></i> View
                                            </button>
                                            @if (invoice.Status == "Unpaid")
                                            {
                                                <button class="btn btn-sm btn-success ms-2" @onclick="() => PayInvoice(invoice.InvoiceId)">
                                                    <i class="fas fa-credit-card"></i> Pay
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            No invoices found
                        </div>
                    }
                </div>
            </div>

            <div class="content-card">
    <div class="card-header">
        <h3>Upcoming Hearings</h3>
        <button class="btn btn-primary btn-sm" @onclick="NavigateToHearings">
            View All
        </button>
    </div>
    <div class="card-body">
        @if (upcomingHearings.Any())
        {
            <div class="hearing-grid">
                @foreach (var hearing in upcomingHearings.OrderBy(h => h.HearingDate).Take(3))
                {
                    <div class="hearing-card">
                        <div class="hearing-card-header">
                            <h4>@(cases.FirstOrDefault(c => c.CaseId == hearing.CaseId)?.Title ?? "Case Details")</h4>
                            <span class="badge bg-primary">
                                @hearing.HearingDate.ToString("MMM dd, yyyy")
                            </span>
                        </div>
                        <div class="hearing-card-body">
                            <div class="hearing-info">
                                <p><strong>Time:</strong> @hearing.HearingDate.ToString("h:mm tt")</p>
                                <p><strong>Venue:</strong> @hearing.Venue</p>
                                <p><strong>Case:</strong> @(cases.FirstOrDefault(c => c.CaseId == hearing.CaseId)?.Title ?? "Unknown Case")</p>
                            </div>
                            <div class="hearing-actions">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewCase(hearing.CaseId)">
                                    <i class="fas fa-eye"></i> View Case
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info" role="alert">
                No upcoming hearings
            </div>
        }
    </div>
</div>
        }
    </div>
@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    [Parameter]
    public int UserId { get; set; }

    private User? user;
    private Client? client;
    private List<Case> cases = new();
    private Dictionary<int, List<Document>> documents = new();
    private Dictionary<int, List<Hearing>> hearings = new();
    private Dictionary<int, List<Invoice>> invoices = new();
    private Dictionary<int, Lawyer> lawyers = new();
    private List<Invoice> recentInvoices = new();
    private List<Hearing> upcomingHearings = new();

    private bool isLoading = true;
    private string? errorMessage;

    private int activeCasesCount = 0;
    private int unpaidInvoicesCount = 0;
    private int upcomingHearingsCount = 0;
    private DateTime? nextHearingDate = null;

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userResponse = await Http.GetAsync($"/api/Users/{UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                isLoading = false;
                return;
            }
            user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);

            var casesResponse = await Http.GetAsync("/api/Cases");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var allCases = await casesResponse.Content.ReadFromJsonAsync<List<Case>>(jsonOptions) ?? new List<Case>();
            cases = allCases.Where(c => c.CaseId == UserId).ToList();

            activeCasesCount = cases.Count(c => c.Status == CaseStatus.Open || c.Status == CaseStatus.InProgress);

            var tasks = new List<Task>();
            foreach (var caseItem in cases)
            {
                tasks.Add(LoadCaseDetails(caseItem.CaseId));
            }
            await Task.WhenAll(tasks);

            unpaidInvoicesCount = invoices.Values.SelectMany(i => i).Count(i => i.Status == "Unpaid");
            upcomingHearingsCount = hearings.Values.SelectMany(h => h).Count(h => h.HearingDate > DateTime.Now);
            nextHearingDate = hearings.Values.SelectMany(h => h)
                .Where(h => h.HearingDate > DateTime.Now)
                .OrderBy(h => h.HearingDate)
                .FirstOrDefault()?.HearingDate;

            recentInvoices = invoices.Values.SelectMany(i => i)
                .OrderByDescending(i => i.IssuedDate)
                .Take(5)
                .ToList();

            upcomingHearings = hearings.Values.SelectMany(h => h)
                .Where(h => h.HearingDate > DateTime.Now)
                .OrderBy(h => h.HearingDate)
                .Take(3)
                .ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCaseDetails(int caseId)
    {
        try
        {
            var caseItem = cases.First(c => c.CaseId == caseId);
            if (!lawyers.ContainsKey(caseItem.LawyerId))
            {
                var lawyerResponse = await Http.GetAsync($"/api/Lawyers/{caseItem.LawyerId}");
                if (lawyerResponse.IsSuccessStatusCode)
                {
                    var lawyer = await lawyerResponse.Content.ReadFromJsonAsync<Lawyer>(jsonOptions);
                    if (lawyer != null)
                    {
                        lawyers[caseItem.LawyerId] = lawyer;
                    }
                }
            }

            var docsResponse = await Http.GetAsync($"/api/cases/{caseId}/Documents");
            if (docsResponse.IsSuccessStatusCode)
            {
                documents[caseId] = await docsResponse.Content.ReadFromJsonAsync<List<Document>>(jsonOptions) ?? new List<Document>();
            }

            var hearingsResponse = await Http.GetAsync($"/api/cases/{caseId}/Hearings");
            if (hearingsResponse.IsSuccessStatusCode)
            {
                hearings[caseId] = await hearingsResponse.Content.ReadFromJsonAsync<List<Hearing>>(jsonOptions) ?? new List<Hearing>();
            }

            var invoicesResponse = await Http.GetAsync($"/api/cases/{caseId}/Invoices");
            if (invoicesResponse.IsSuccessStatusCode)
            {
                invoices[caseId] = await invoicesResponse.Content.ReadFromJsonAsync<List<Invoice>>(jsonOptions) ?? new List<Invoice>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading details for case {caseId}: {ex.Message}");
        }
    }

    private string GetStatusBadgeClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "bg-primary",
            CaseStatus.Closed => "bg-secondary",
            CaseStatus.Pending => "bg-warning",
            CaseStatus.Active => "bg-success",
            CaseStatus.Completed => "bg-info",
            CaseStatus.InProgress => "bg-primary",
            _ => "bg-light text-dark"
        };
    }

    private string GetInvoiceStatusBadge(string status)
    {
        return status switch
        {
            "Paid" => "bg-success",
            "Unpaid" => "bg-danger",
            "Pending" => "bg-warning",
            "Partial" => "bg-info",
            _ => "bg-secondary"
        };
    }


    private void NavigateToCases()
    {
        Navigation.NavigateTo($"/client/{UserId}/cases");
    }

    private void NavigateToInvoices()
    {
        Navigation.NavigateTo($"/client/{UserId}/invoices");
    }

    private void NavigateToHearings()
    {
        Navigation.NavigateTo($"/client/{UserId}/hearings");
    }

    private void ViewCase(int caseId)
    {
        Navigation.NavigateTo($"/client/{UserId}/cases/{caseId}");
    }

    private void ViewInvoice(int invoiceId)
    {
        Navigation.NavigateTo($"/client/{UserId}/invoices/{invoiceId}");
    }

    private void PayInvoice(int invoiceId)
    {
        Navigation.NavigateTo($"/client/{UserId}/invoices/{invoiceId}/pay");
    }
}
