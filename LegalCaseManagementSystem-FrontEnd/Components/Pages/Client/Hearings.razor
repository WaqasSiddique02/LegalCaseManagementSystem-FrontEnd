@page "/client/{userId:int}/hearings"
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="dashboard @(isDarkMode ? "dark-mode" : "")">
    <header class="dashboard-header">
        <div class="header-container">
            <div class="header-brand">
                <img src="/images/law.png" alt="Client Portal Logo" class="brand-logo" />
                <div class="brand-text">
                    <h1>Client Portal <span class="pro-badge">PRO</span></h1>
                    <p class="brand-tagline">Legal Support • Client Services</p>
                </div>
            </div>

            <div class="header-left">
                <h1>My Hearings</h1>
                <p class="text-muted">@user?.Username</p>
            </div>

            <div class="header-actions">
                <div class="user-dropdown">
                    <div class="user-avatar-container">
                        <img src="https://ui-avatars.com/api/?name=@(user?.Username?.FirstOrDefault() ?? 'U')&background=4e73df&color=fff"
                             class="user-avatar" />
                        <span class="user-status"></span>
                    </div>
                    <div class="dropdown-menu">
                        <a href="/update-password" class="dropdown-item">
                            <i class="fas fa-cog"></i> Change Password
                        </a>
                        <div class="dropdown-divider"></div>
                        <a href="/login" class="dropdown-item">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </a>
                    </div>
                </div>
            </div>

            <button class="mobile-menu-toggle">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </header>

    <div class="dashboard-grid">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        else
        {
            <div class="content-card">
                <div class="card-header">
                    <h3>All Hearings</h3>
                    <div class="d-flex align-items-center gap-2">
                        <select class="form-select form-select-sm" @onchange="FilterHearings">
                            <option value="All">All</option>
                            <option value="Upcoming">Upcoming</option>
                            <option value="Past">Past</option>
                        </select>
                        <a href="/client/@UserId" class="btn btn-primary btn-sm">Back to Dashboard</a>
                    </div>
                </div>
                <div class="card-body">
                    @if (filteredHearings.Any())
                    {
                        <div class="hearing-list">
                            @foreach (var hearing in filteredHearings.OrderBy(h => h.HearingDate))
                            {
                                <div class="hearing-item">
                                    <div class="hearing-date">
                                        <span class="day">@hearing.HearingDate.Day</span>
                                        <span class="month">@hearing.HearingDate.ToString("MMM")</span>
                                    </div>
                                    <div class="hearing-info">
                                        <h4>@(cases.FirstOrDefault(c => c.CaseId == hearing.CaseId)?.Title ?? "Unknown")</h4>
                                        <p><i class="fas fa-clock"></i> @hearing.HearingDate.ToString("h:mm tt")</p>
                                        <p><i class="fas fa-map-marker-alt"></i> @hearing.Venue</p>
                                        <div class="hearing-actions">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewHearing(hearing.HearingId, hearing.CaseId)">
                                                <i class="fas fa-eye"></i> View Details
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            No hearings found
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    [Parameter]
    public int UserId { get; set; }

    private User? user;
    private Client? client;
    private List<Case> cases = new();
    private List<Hearing> hearings = new();
    private List<Hearing> filteredHearings = new();
    private bool isDarkMode = false;
    private bool isLoading = true;
    private string? errorMessage;
    private string filterStatus = "All";

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userResponse = await Http.GetAsync($"/api/Users/{UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                isLoading = false;
                return;
            }
            user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);

            var clientsResponse = await Http.GetAsync($"/api/Clients?userId={UserId}");
            if (!clientsResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading client: {clientsResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var clients = await clientsResponse.Content.ReadFromJsonAsync<List<Client>>(jsonOptions);
            client = clients?.FirstOrDefault();

            if (client == null)
            {
                errorMessage = "No client found for this user";
                isLoading = false;
                return;
            }

            var casesResponse = await Http.GetAsync($"/api/Cases?clientId={client.UserId}");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                isLoading = false;
                return;
            }

            cases = await casesResponse.Content.ReadFromJsonAsync<List<Case>>(jsonOptions) ?? new List<Case>();

            var tasks = new List<Task>();
            foreach (var caseItem in cases)
            {
                tasks.Add(LoadHearings(caseItem.CaseId));
            }
            await Task.WhenAll(tasks);

            filteredHearings = hearings;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadHearings(int caseId)
    {
        try
        {
            var hearingsResponse = await Http.GetAsync($"/api/cases/{caseId}/Hearings");
            if (hearingsResponse.IsSuccessStatusCode)
            {
                var caseHearings = await hearingsResponse.Content.ReadFromJsonAsync<List<Hearing>>(jsonOptions) ?? new List<Hearing>();
                hearings.AddRange(caseHearings);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading hearings for case {caseId}: {ex.Message}");
        }
    }

    private async Task ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        StateHasChanged();
    }

    private void ViewHearing(int hearingId, int caseId)
    {
        Navigation.NavigateTo($"/client/{UserId}/hearings/{caseId}/{hearingId}");
    }

    private void FilterHearings(ChangeEventArgs e)
    {
        filterStatus = e.Value?.ToString() ?? "All";
        filteredHearings = filterStatus switch
        {
            "Upcoming" => hearings.Where(h => h.HearingDate > DateTime.Now).ToList(),
            "Past" => hearings.Where(h => h.HearingDate <= DateTime.Now).ToList(),
            _ => hearings
        };
        StateHasChanged();
    }
}