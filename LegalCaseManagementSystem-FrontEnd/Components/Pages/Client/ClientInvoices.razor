@using LegalCaseManagementSystem_FrontEnd.Models
@using LegalCaseManagementSystem_FrontEnd.Services
@using LegalCaseManagementSystem_FrontEnd.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="invoices-card">
    <div class="card-header">
        <h3>Recent Invoices</h3>
        <button class="btn btn-primary btn-sm" @onclick="NavigateToInvoices">
            View All
        </button>
    </div>
    <div class="invoices-list">
        @if (RecentInvoices.Any())
        {
            <table class="invoices-table">
                <thead>
                    <tr>
                        <th>Invoice #</th>
                        <th>Case</th>
                        <th>Amount</th>
                        <th>Due Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var invoice in RecentInvoices)
                    {
                        <tr @onclick="() => ViewInvoiceDetails(invoice.InvoiceId)">
                            <td>@invoice.InvoiceId</td>
                            <td>@(invoice.Case?.Title ?? "N/A")</td>
                            <td>@invoice.Amount.ToString("C")</td>
                            <td>@invoice.IssuedDate.ToString("MMM dd, yyyy")</td>
                            <td>
                                <span class="invoice-status @invoice.Status.ToLower()">
                                    @invoice.Status
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="no-invoices">
                <i class="fas fa-file-invoice"></i>
                <p>No invoices found</p>
            </div>
        }
    </div>
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");
    private List<Invoice> RecentInvoices { get; set; } = new List<Invoice>();

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId)) return;

            var clientResponse = await Http.GetAsync($"/api/Clients/{userId}");
            if (!clientResponse.IsSuccessStatusCode) return;

            var clientContent = await clientResponse.Content.ReadAsStringAsync();
            var client = System.Text.Json.JsonSerializer.Deserialize<Client>(clientContent, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
          
        }
        catch
        {
            
        }
    }

    private void NavigateToInvoices()
    {
        Navigation.NavigateTo("/client/invoices");
    }

    private void ViewInvoiceDetails(int invoiceId)
    {
        Navigation.NavigateTo($"/client/invoices/{invoiceId}");
    }
}