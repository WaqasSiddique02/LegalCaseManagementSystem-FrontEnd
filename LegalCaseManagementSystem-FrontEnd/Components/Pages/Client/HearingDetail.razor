@page "/client/{userId:int}/hearings/{caseId:int}/{hearingId:int}"
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<ClientHeader></ClientHeader>

<div class="hearing-container">
    <div class="bg-glows">
        <div class="glow-circle primary"></div>
        <div class="glow-circle secondary"></div>
    </div>

    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="spinner-container">
                <div class="spinner"></div>
                <p>Loading hearing details...</p>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="error-card">
            <div class="error-icon">
                <i class="fas fa-exclamation-circle"></i>
            </div>
            <div class="error-content">
                <h3>Error Loading Hearing</h3>
                <p>@errorMessage</p>
                <button class="btn btn-retry" @onclick="ReloadPage">
                    <i class="fas fa-sync-alt"></i> Try Again
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="hearing-header">
            <div class="header-content">
                <h2>Hearing Details</h2>
                <div class="breadcrumb">
                    <a href="/client/@UserId">Client</a> /
                    <a href="/client/@UserId/hearings">Hearings</a> /
                    <span>Case #@CaseId</span>
                </div>
            </div>
            <div class="header-actions">
                <a href="/client/@UserId/hearings" class="btn btn-back">
                    <i class="fas fa-arrow-left"></i> All Hearings
                </a>
                <a href="/client/@UserId/cases/@CaseId" class="btn btn-view-case">
                    <i class="fas fa-gavel"></i> View Case
                </a>
            </div>
        </div>

        <div class="hearing-card">
            <div class="hearing-summary">
                <div class="summary-header">
                    <div class="hearing-title">
                        <h3>@caseItem?.Title</h3>
                        <div class="case-meta">
                            <span class="badge @GetStatusBadgeClass(caseItem.Status)">
                                @caseItem.Status
                            </span>
                            <span class="hearing-ref">
                                Hearing ID: #@HearingId
                            </span>
                        </div>
                    </div>
                    <div class="hearing-date">
                        <div class="date-badge">
                            <span class="month">@hearing.HearingDate.ToString("MMM")</span>
                            <span class="day">@hearing.HearingDate.Day</span>
                            <span class="year">@hearing.HearingDate.Year</span>
                        </div>
                        <div class="time-display">
                            <i class="fas fa-clock"></i>
                            <span>@hearing.HearingDate.ToString("h:mm tt")</span>
                        </div>
                    </div>
                </div>

                <div class="hearing-body">
                    <div class="detail-sections">
                        <div class="detail-section">
                            <div class="section-header">
                                <i class="fas fa-landmark"></i>
                                <h4>Hearing Information</h4>
                            </div>
                            <div class="detail-grid">
                                <div class="detail-item">
                                    <span class="detail-label">Court Venue</span>
                                    <span class="detail-value">@hearing.Venue</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Hearing Id</span>
                                    <span class="detail-value">@hearing.HearingId</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Hearing Date</span>
                                    <span class="detail-value">@(hearing.HearingDate.ToString() ?? "Not available")</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">OutCome</span>
                                    <span class="detail-value">@(hearing.Outcome ?? "Not specified")</span>
                                </div>
                            </div>
                        </div>

                        <div class="detail-section">
                            <div class="section-header">
                                <i class="fas fa-file-contract"></i>
                                <h4>Case Information</h4>
                            </div>
                            <div class="detail-grid">
                                <div class="detail-item">
                                    <span class="detail-label">Case Title</span>
                                    <span class="detail-value">@caseItem.Title</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Case Number</span>
                                    <span class="detail-value">@caseItem.CaseId</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Assigned Lawyer</span>
                                    <span class="detail-value">@(lawyer?.FullName ?? "Not assigned")</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">Case Status</span>
                                    <span class="detail-value @GetStatusTextClass(caseItem.Status)">
                                        @caseItem.Status
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int CaseId { get; set; }

    [Parameter]
    public int HearingId { get; set; }

    private User? user;
    private Case? caseItem;
    private Hearing? hearing;
    private Lawyer? lawyer;
    private bool isLoading = true;
    private string? errorMessage;

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var userResponse = await Http.GetAsync($"/api/Users/{UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                isLoading = false;
                return;
            }
            user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);

            var caseResponse = await Http.GetAsync($"/api/Cases/{CaseId}");
            if (!caseResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading case: {caseResponse.StatusCode}";
                isLoading = false;
                return;
            }
            caseItem = await caseResponse.Content.ReadFromJsonAsync<Case>(jsonOptions);

            var hearingResponse = await Http.GetAsync($"/api/cases/{CaseId}/Hearings/{HearingId}");
            if (!hearingResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading hearing: {hearingResponse.StatusCode}";
                isLoading = false;
                return;
            }
            hearing = await hearingResponse.Content.ReadFromJsonAsync<Hearing>(jsonOptions);

            if (caseItem != null && caseItem.LawyerId > 0)
            {
                var lawyerResponse = await Http.GetAsync($"/api/Lawyers/{caseItem.LawyerId}");
                if (lawyerResponse.IsSuccessStatusCode)
                {
                    lawyer = await lawyerResponse.Content.ReadFromJsonAsync<Lawyer>(jsonOptions);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetStatusBadgeClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "badge-primary",
            CaseStatus.Closed => "badge-secondary",
            CaseStatus.Pending => "badge-warning",
            CaseStatus.Active => "badge-success",
            CaseStatus.Completed => "badge-info",
            CaseStatus.InProgress => "badge-primary",
            _ => "badge-light"
        };
    }

    private string GetStatusTextClass(CaseStatus status)
    {
        return status switch
        {
            CaseStatus.Open => "text-primary",
            CaseStatus.Closed => "text-secondary",
            CaseStatus.Pending => "text-warning",
            CaseStatus.Active => "text-success",
            CaseStatus.Completed => "text-info",
            CaseStatus.InProgress => "text-primary",
            _ => "text-light"
        };
    }

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
}