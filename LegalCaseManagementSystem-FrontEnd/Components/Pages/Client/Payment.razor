@page "/client/{userId:int}/invoices/{invoiceId:int}/pay"
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<ClientHeader></ClientHeader>

<div class="payment-container">
    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="spinner-container">
                <div class="spinner"></div>
                <p>Loading payment details...</p>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="error-card">
            <div class="error-icon">
                <i class="fas fa-exclamation-circle"></i>
            </div>
            <div class="error-content">
                <h3>Payment Error</h3>
                <p>@errorMessage</p>
                <button class="btn btn-retry" @onclick="ReloadPage">
                    <i class="fas fa-sync-alt"></i> Try Again
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="payment-header">
            <div class="header-content">
                <h2>Payment Authorization</h2>
                <div class="breadcrumb">
                    <a href="/client/@UserId">Client</a> /
                    <a href="/client/@UserId/invoices">Invoices</a> /
                    <span>Payment #@invoice?.InvoiceId</span>
                </div>
            </div>
            <div class="header-actions">
                <a href="/client/@UserId/invoices" class="btn btn-back">
                    <i class="fas fa-arrow-left"></i> Back to Invoices
                </a>
            </div>
        </div>

        <div class="payment-card">
            <div class="payment-summary">
                <div class="summary-header">
                    <div class="invoice-meta">
                        <span class="badge badge-unpaid">
                            Payment Required
                        </span>
                        <span class="invoice-number">
                            Invoice #@invoice?.InvoiceId
                        </span>
                    </div>
                    <div class="invoice-amount">
                        <span class="amount-label">Total Due</span>
                        <span class="amount-value">@invoice?.Amount.ToString("C")</span>
                    </div>
                </div>

                <div class="payment-details">
                    <div class="detail-section">
                        <h4><i class="fas fa-file-invoice"></i> Invoice Details</h4>
                        <div class="detail-grid">
                            <div class="detail-item">
                                <span class="detail-label">Case Reference</span>
                                <span class="detail-value">@(caseItem?.Title ?? "Not specified")</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Issued Date</span>
                                <span class="detail-value">@invoice?.IssuedDate.ToString("MMMM dd, yyyy")</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Case Number</span>
                                <span class="detail-value">@(caseItem?.CaseId.ToString() ?? "Not specified")</span>
                            </div>
                        </div>
                    </div>

                    <div class="payment-notice">
                        <i class="fas fa-info-circle"></i>
                        <p>Please review the invoice details and proceed to payment when ready.</p>
                    </div>

                    <button class="btn btn-pay" @onclick="OpenPaymentDialog">
                        <i class="fas fa-lock"></i> Secure Payment
                    </button>
                </div>
            </div>
        </div>
    }

    @if (showPaymentDialog)
    {
        <div class="payment-modal-overlay @(showPaymentDialog ? "active" : "")">
            <div class="payment-modal">
                <div class="modal-header">
                    <div class="header-content">
                        <i class="fas fa-lock"></i>
                        <h3>Secure Payment Gateway</h3>
                    </div>
                    <button class="btn-close" @onclick="ClosePaymentDialog">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <div class="modal-body">
                    <div class="payment-confirmation">
                        <div class="confirmation-header">
                            <div class="payment-amount">
                                <span class="amount-label">Amount to Pay</span>
                                <span class="amount">@invoice?.Amount.ToString("C")</span>
                            </div>
                            <div class="invoice-reference">
                                <span>Invoice #@InvoiceId</span>
                            </div>
                        </div>

                        <div class="payment-form">
                            <div class="form-group">
                                <label for="cardNumber">Card Number</label>
                                <div class="input-with-icon">
                                    <i class="far fa-credit-card"></i>
                                    <input type="text" id="cardNumber" class="form-control"
                                           placeholder="1234 5678 9012 3456" @bind="cardNumber"
                                           @oninput="FormatCardNumber" maxlength="19" />
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="expiry">Expiration Date</label>
                                    <div class="input-with-icon">
                                        <i class="far fa-calendar-alt"></i>
                                        <input type="text" id="expiry" class="form-control"
                                               placeholder="MM/YY" @bind="expiry"
                                               @oninput="FormatExpiry" maxlength="5" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="cvv">Security Code</label>
                                    <div class="input-with-icon">
                                        <i class="fas fa-lock"></i>
                                        <input type="password" id="cvv" class="form-control"
                                               placeholder="•••" @bind="cvv" maxlength="4" />
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="cardName">Name on Card</label>
                                <div class="input-with-icon">
                                    <i class="far fa-user"></i>
                                    <input type="text" id="cardName" class="form-control"
                                           placeholder="Full Name" @bind="cardName" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-cancel" @onclick="ClosePaymentDialog">
                        Cancel Payment
                    </button>
                    <button class="btn btn-confirm" @onclick="ConfirmPayment" disabled="@(isProcessing)">
                        @if (isProcessing)
                        {
                            <span class="spinner"></span>
                        }
                        else
                        {
                            <span>Confirm Payment</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int InvoiceId { get; set; }

    private User? user;
    private Client? client;
    private Case? caseItem;
    private Invoice? invoice;
    private bool isLoading = true;
    private bool isProcessing = false;
    private string? errorMessage;
    private bool showPaymentDialog = false;
    private string cardNumber = "";
    private string expiry = "";
    private string cvv = "";
    private string cardName = "";

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoiceData();
    }

    private async Task LoadInvoiceData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var userResponse = await Http.GetAsync($"/api/Users/{UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                isLoading = false;
                return;
            }
            user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);

            var clientsResponse = await Http.GetAsync($"/api/Clients?userId={UserId}");
            if (!clientsResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading client: {clientsResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var clients = await clientsResponse.Content.ReadFromJsonAsync<List<Client>>(jsonOptions);
            client = clients?.FirstOrDefault();

            if (client == null)
            {
                errorMessage = "No client found for this user";
                isLoading = false;
                return;
            }

            var casesResponse = await Http.GetAsync($"/api/Cases?clientId={client.UserId}");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var cases = await casesResponse.Content.ReadFromJsonAsync<List<Case>>(jsonOptions) ?? new List<Case>();

            foreach (var caseItem in cases)
            {
                var invoiceResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Invoices/{InvoiceId}");
                if (invoiceResponse.IsSuccessStatusCode)
                {
                    invoice = await invoiceResponse.Content.ReadFromJsonAsync<Invoice>(jsonOptions);
                    if (invoice != null)
                    {
                        this.caseItem = cases.FirstOrDefault(c => c.CaseId == invoice.CaseId);
                        break;
                    }
                }
            }

            if (invoice == null)
            {
                errorMessage = "Invoice not found";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenPaymentDialog()
    {
        showPaymentDialog = true;
    }

    private void ClosePaymentDialog()
    {
        showPaymentDialog = false;
        cardNumber = "";
        expiry = "";
        cvv = "";
        cardName = "";
    }

    private void FormatCardNumber(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "";
        value = new string(value.Where(char.IsDigit).ToArray());

        if (value.Length > 16) value = value.Substring(0, 16);

        var formatted = new System.Text.StringBuilder();
        for (int i = 0; i < value.Length; i++)
        {
            if (i > 0 && i % 4 == 0) formatted.Append(" ");
            formatted.Append(value[i]);
        }

        cardNumber = formatted.ToString();
    }

    private void FormatExpiry(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "";
        value = new string(value.Where(char.IsDigit).ToArray());

        if (value.Length > 4) value = value.Substring(0, 4);

        if (value.Length > 2)
        {
            value = value.Insert(2, "/");
        }

        expiry = value;
    }

    private async Task ConfirmPayment()
    {
        try
        {
            isProcessing = true;
            errorMessage = null;

            if (string.IsNullOrWhiteSpace(cardNumber) ||
                string.IsNullOrWhiteSpace(expiry) ||
                string.IsNullOrWhiteSpace(cvv) ||
                string.IsNullOrWhiteSpace(cardName))
            {
                errorMessage = "Please fill all payment details";
                isProcessing = false;
                return;
            }

            if (invoice == null || invoice.CaseId == 0)
            {
                errorMessage = "Invoice data is incomplete";
                isProcessing = false;
                return;
            }

            var updateRequest = new
            {
                InvoiceId = InvoiceId,
                CaseId = invoice.CaseId,
                Amount = invoice.Amount,
                IssuedDate = invoice.IssuedDate,
                Status = "Paid",
                PaidDate = DateTime.Now
            };

            var response = await Http.PutAsJsonAsync(
                $"/api/cases/{invoice.CaseId}/Invoices/{InvoiceId}",
                updateRequest);

            if (response.IsSuccessStatusCode)
            {
                invoice.Status = "Paid";
                await Task.Delay(1000);
                Navigation.NavigateTo($"/client/{UserId}/invoices");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Payment failed: {response.StatusCode} - {errorContent}";
                Console.WriteLine($"API Error: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Payment processing error: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
}