@page "/client/{userId:int}/invoices/{invoiceId:int}/pay"
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<ClientHeader></ClientHeader>

    <div class="dashboard-grid">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        else
        {
            <div class="content-card">
                <div class="card-header">
                    <h3>Pay Invoice #@invoice?.InvoiceId</h3>
                    <a href="/client/@UserId/invoices" class="btn btn-primary btn-sm">Back to Invoices</a>
                </div>
                <div class="card-body">
                    <div class="payment-details">
                        <p><strong>Case:</strong> <span>@(caseItem?.Title ?? "Unknown")</span></p>
                        <p><strong>Amount:</strong> <span>@invoice?.Amount.ToString("C")</span></p>
                        <p><strong>Issued Date:</strong> <span>@invoice?.IssuedDate.ToString("MMM dd, yyyy")</span></p>
                        <p><strong>Status:</strong> <span>@invoice?.Status</span></p>
                    </div>
                    <div class="alert alert-info mt-3">
                        Please confirm your payment details below to process the payment for Invoice #@InvoiceId.
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-success" @onclick="OpenPaymentDialog">
                            <i class="fas fa-credit-card"></i> Proceed to Payment
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (showPaymentDialog)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>Confirm Payment</h4>
                    <button class="btn-close" @onclick="ClosePaymentDialog">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to pay <strong>@invoice?.Amount.ToString("C")</strong> for Invoice #@InvoiceId?</p>
                    <div class="payment-form">
                        <div class="form-group">
                            <label for="cardNumber">Card Number</label>
                            <input type="text" id="cardNumber" class="form-control" placeholder="1234 5678 9012 3456" @bind="cardNumber" />
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="expiry">Expiry Date</label>
                                <input type="text" id="expiry" class="form-control" placeholder="MM/YY" @bind="expiry" />
                            </div>
                            <div class="form-group">
                                <label for="cvv">CVV</label>
                                <input type="text" id="cvv" class="form-control" placeholder="123" @bind="cvv" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="ClosePaymentDialog">Cancel</button>
                    <button class="btn btn-success" @onclick="ConfirmPayment">Confirm Payment</button>
                </div>
            </div>
        </div>
    }

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int InvoiceId { get; set; }

    private User? user;
    private Client? client;
    private Case? caseItem;
    private Invoice? invoice;
    private bool isDarkMode = false;
    private bool isLoading = true;
    private string? errorMessage;
    private bool showPaymentDialog = false;
    private string cardNumber = "";
    private string expiry = "";
    private string cvv = "";

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userResponse = await Http.GetAsync($"/api/Users/{UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                isLoading = false;
                return;
            }
            user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);

            var clientsResponse = await Http.GetAsync($"/api/Clients?userId={UserId}");
            if (!clientsResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading client: {clientsResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var clients = await clientsResponse.Content.ReadFromJsonAsync<List<Client>>(jsonOptions);
            client = clients?.FirstOrDefault();

            if (client == null)
            {
                errorMessage = "No client found for this user";
                isLoading = false;
                return;
            }

            var casesResponse = await Http.GetAsync($"/api/Cases?clientId={client.UserId}");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var cases = await casesResponse.Content.ReadFromJsonAsync<List<Case>>(jsonOptions) ?? new List<Case>();

            foreach (var caseItem in cases)
            {
                var invoiceResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Invoices/{InvoiceId}");
                if (invoiceResponse.IsSuccessStatusCode)
                {
                    invoice = await invoiceResponse.Content.ReadFromJsonAsync<Invoice>(jsonOptions);
                    if (invoice != null)
                    {
                        this.caseItem = cases.FirstOrDefault(c => c.CaseId == invoice.CaseId);
                        break;
                    }
                }
            }

            if (invoice == null)
            {
                errorMessage = "Invoice not found";
                isLoading = false;
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }


    private void OpenPaymentDialog()
    {
        showPaymentDialog = true;
    }

    private void ClosePaymentDialog()
    {
        showPaymentDialog = false;
        cardNumber = "";
        expiry = "";
        cvv = "";
    }

    private async Task ConfirmPayment()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); 

            if (string.IsNullOrWhiteSpace(cardNumber) ||
                string.IsNullOrWhiteSpace(expiry) ||
                string.IsNullOrWhiteSpace(cvv))
            {
                errorMessage = "Please fill all payment details";
                isLoading = false;
                return;
            }

            var updateRequest = new
            {
                InvoiceId = InvoiceId,
                CaseId = invoice.CaseId, 
                Amount = invoice.Amount,
                IssuedDate = invoice.IssuedDate,
                Status = "Paid",
            };

            var response = await Http.PutAsJsonAsync(
                $"/api/cases/{invoice.CaseId}/Invoices/{InvoiceId}",
                updateRequest);

            if (response.IsSuccessStatusCode)
            {
                invoice.Status = "Paid";
                errorMessage = "Payment successful! Redirecting...";

                await Task.Delay(2000);
                Navigation.NavigateTo($"/client/{UserId}/invoices");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Payment failed: {response.StatusCode}";
                Console.WriteLine($"API Error: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Payment error: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}