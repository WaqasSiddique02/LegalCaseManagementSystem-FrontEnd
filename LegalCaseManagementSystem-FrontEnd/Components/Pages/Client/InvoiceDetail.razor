@page "/client/{userId:int}/invoices/{invoiceId:int}"
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="dashboard @(isDarkMode ? "dark-mode" : "")">
    <header class="dashboard-header">
        <div class="header-container">
            <div class="header-brand">
                <img src="/images/law.png" alt="Client Portal Logo" class="brand-logo" />
                <div class="brand-text">
                    <h1>Client Portal <span class="pro-badge">PRO</span></h1>
                    <p class="brand-tagline">Legal Support • Client Services</p>
                </div>
            </div>

            <div class="header-left">
                <h1>Case Details</h1>
                <p class="text-muted">@user?.Username</p>
            </div>

            <div class="header-actions">
                <div class="user-dropdown">
                    <div class="user-avatar-container">
                        <img src="https://ui-avatars.com/api/?name=@(user?.Username?.FirstOrDefault() ?? 'U')&background=4e73df&color=fff"
                             class="user-avatar" />
                        <span class="user-status"></span>
                    </div>
                    <div class="dropdown-menu">
                        <a href="/client/profile/@UserId" class="dropdown-item">
                            <i class="fas fa-user"></i> My Profile
                        </a>
                        <a href="#" class="dropdown-item">
                            <i class="fas fa-cog"></i> Settings
                        </a>
                        <div class="dropdown-divider"></div>
                        <a href="/logout" class="dropdown-item">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </a>
                    </div>
                </div>
            </div>

            <button class="mobile-menu-toggle">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </header>

    <div class="dashboard-grid">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        else
        {
            <div class="content-card">
                <div class="card-header">
                    <h3>Invoice #@invoice?.InvoiceId</h3>
                    <div>
                        <span class="badge @GetInvoiceStatusBadge(invoice?.Status ?? "Pending")">
                            @invoice?.Status
                        </span>
                        <a href="/client/@UserId/invoices" class="btn btn-primary btn-sm ms-2">Back to Invoices</a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="invoice-details">
                        <p><strong>Case:</strong> @(caseItem?.Title ?? "Unknown")</p>
                        <p><strong>Amount:</strong> @invoice?.Amount.ToString("C")</p>
                        <p><strong>Issued Date:</strong> @invoice?.IssuedDate.ToString("MMM dd, yyyy")</p>
                        <p><strong>Status:</strong> @invoice?.Status</p>
                    </div>
                    @if (invoice?.Status == "Unpaid")
                    {
                        <div class="mt-3">
                            <button class="btn btn-success" @onclick="() => PayInvoice(invoice.InvoiceId)">
                                <i class="fas fa-credit-card"></i> Pay Now
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int InvoiceId { get; set; }

    private User? user;
    private Client? client;
    private Case? caseItem;
    private Invoice? invoice;
    private bool isDarkMode = false;
    private bool isLoading = true;
    private string? errorMessage;

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userResponse = await Http.GetAsync($"/api/Users/{UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                isLoading = false;
                return;
            }
            user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);

            var clientsResponse = await Http.GetAsync($"/api/Clients?userId={UserId}");
            if (!clientsResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading client: {clientsResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var clients = await clientsResponse.Content.ReadFromJsonAsync<List<Client>>(jsonOptions);
            client = clients?.FirstOrDefault();

            if (client == null)
            {
                errorMessage = "No client found for this user";
                isLoading = false;
                return;
            }

            var casesResponse = await Http.GetAsync($"/api/Cases?clientId={client.UserId}");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var cases = await casesResponse.Content.ReadFromJsonAsync<List<Case>>(jsonOptions) ?? new List<Case>();

            foreach (var caseItem in cases)
            {
                var invoiceResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Invoices/{InvoiceId}");
                if (invoiceResponse.IsSuccessStatusCode)
                {
                    invoice = await invoiceResponse.Content.ReadFromJsonAsync<Invoice>(jsonOptions);
                    if (invoice != null)
                    {
                        this.caseItem = cases.FirstOrDefault(c => c.CaseId == invoice.CaseId);
                        break;
                    }
                }
            }

            if (invoice == null)
            {
                errorMessage = "Invoice not found";
                isLoading = false;
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetInvoiceStatusBadge(string status)
    {
        return status switch
        {
            "Paid" => "bg-success",
            "Unpaid" => "bg-danger",
            "Pending" => "bg-warning",
            "Partial" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private async Task ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        StateHasChanged();
    }

    private void PayInvoice(int invoiceId)
    {
        Navigation.NavigateTo($"/client/{UserId}/invoices/{invoiceId}/pay");
    }
}
