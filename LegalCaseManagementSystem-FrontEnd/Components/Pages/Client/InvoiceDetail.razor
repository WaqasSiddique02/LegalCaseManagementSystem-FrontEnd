@page "/client/{userId:int}/invoices/{invoiceId:int}"
@using LegalCaseManagementSystem_FrontEnd.Models
@using System.Text.Json.Serialization
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<ClientHeader></ClientHeader>

<div class="invoice-container">
    <div class="invoice-header">
        <div class="header-content">
            <h2>Invoice Details</h2>
            <div class="breadcrumb">
                <a href="/client/@UserId">Client</a> /
                <a href="/client/@UserId/invoices">Invoices</a> /
                <span>#@invoice?.InvoiceId</span>
            </div>
        </div>
        <div class="header-actions">
            <a href="/client/@UserId/invoices" class="btn btn-outline-light">
                <i class="fas fa-arrow-left"></i> Back to Invoices
            </a>
        </div>
    </div>

    <div class="invoice-content">
        @if (isLoading)
        {
            <div class="loading-overlay">
                <div class="spinner-container">
                    <div class="spinner"></div>
                    <p>Loading invoice details...</p>
                </div>
            </div>
        }
        else if (errorMessage != null)
        {
            <div class="error-card">
                <div class="error-icon">
                    <i class="fas fa-exclamation-circle"></i>
                </div>
                <div class="error-content">
                    <h3>Error Loading Invoice</h3>
                    <p>@errorMessage</p>
                    <button class="btn btn-outline-light" @onclick="ReloadPage">
                        <i class="fas fa-sync-alt"></i> Try Again
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="invoice-card">
                <div class="invoice-header-card">
                    <div class="invoice-title">
                        <h3>Invoice #@invoice?.InvoiceId</h3>
                        <div class="invoice-meta">
                            <span class="badge @GetInvoiceStatusBadge(invoice?.Status ?? "Pending")">
                                @invoice?.Status
                            </span>
                            <span class="invoice-date">
                                <i class="far fa-calendar-alt"></i> @invoice?.IssuedDate.ToString("MMM dd, yyyy")
                            </span>
                        </div>
                    </div>
                    <div class="invoice-amount">
                        <span class="amount-label">Total Amount</span>
                        <span class="amount-value">@invoice?.Amount.ToString("C")</span>
                    </div>
                </div>

                <div class="invoice-body">
                    <div class="invoice-section">
                        <h4><i class="fas fa-info-circle"></i> Case Information</h4>
                        <div class="info-grid">
                            <div class="info-item">
                                <span class="info-label">Case Title</span>
                                <span class="info-value">@(caseItem?.Title ?? "Not specified")</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Case Status</span>
                                <span class="info-value">@(caseItem?.Status.ToString() ?? "Not specified")</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Case Number</span>
                                <span class="info-value">@(caseItem?.CaseId.ToString() ?? "Not specified")</span>
                            </div>
                        </div>
                    </div>

                    <div class="invoice-section">
                        <h4><i class="fas fa-file-invoice-dollar"></i> Invoice Details</h4>
                        <div class="details-grid">
                            <div class="detail-item">
                                <span class="detail-label">Invoice Number</span>
                                <span class="detail-value">#@invoice?.InvoiceId</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Issued Date</span>
                                <span class="detail-value">@invoice?.IssuedDate.ToString("MMMM dd, yyyy")</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Due Date</span>
                                <span class="detail-value">@(invoice?.IssuedDate.ToString("MMMM dd, yyyy") ?? "Not specified")</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Payment Status</span>
                                <span class="detail-value @GetInvoiceStatusTextClass(invoice?.Status ?? "Pending")">
                                    @invoice?.Status
                                </span>
                            </div>
                        </div>
                    </div>

                    @if (invoice?.Status == "Unpaid")
                    {
                        <div class="payment-actions">
                            <button class="btn btn-pay" @onclick="() => PayInvoice(invoice.InvoiceId)">
                                <i class="fas fa-credit-card"></i> Pay Now
                            </button>
                        </div>
                    }
                    else if (invoice?.Status == "Paid")
                    {
                        <div class="payment-success">
                            <i class="fas fa-check-circle"></i>
                            <span>This invoice was paid</span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private HttpClient Http => HttpClientFactory.CreateClient("ApiClient");

    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int InvoiceId { get; set; }

    private User? user;
    private Client? client;
    private Case? caseItem;
    private Invoice? invoice;
    private bool isLoading = true;
    private string? errorMessage;

    private static readonly JsonSerializerOptions jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userResponse = await Http.GetAsync($"/api/Users/{UserId}");
            if (!userResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading user: {userResponse.StatusCode}";
                isLoading = false;
                return;
            }
            user = await userResponse.Content.ReadFromJsonAsync<User>(jsonOptions);

            var clientsResponse = await Http.GetAsync($"/api/Clients?userId={UserId}");
            if (!clientsResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading client: {clientsResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var clients = await clientsResponse.Content.ReadFromJsonAsync<List<Client>>(jsonOptions);
            client = clients?.FirstOrDefault();

            if (client == null)
            {
                errorMessage = "No client found for this user";
                isLoading = false;
                return;
            }

            var casesResponse = await Http.GetAsync($"/api/Cases?clientId={client.UserId}");
            if (!casesResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Error loading cases: {casesResponse.StatusCode}";
                isLoading = false;
                return;
            }

            var cases = await casesResponse.Content.ReadFromJsonAsync<List<Case>>(jsonOptions) ?? new List<Case>();

            foreach (var caseItem in cases)
            {
                var invoiceResponse = await Http.GetAsync($"/api/cases/{caseItem.CaseId}/Invoices/{InvoiceId}");
                if (invoiceResponse.IsSuccessStatusCode)
                {
                    invoice = await invoiceResponse.Content.ReadFromJsonAsync<Invoice>(jsonOptions);
                    if (invoice != null)
                    {
                        this.caseItem = cases.FirstOrDefault(c => c.CaseId == invoice.CaseId);
                        break;
                    }
                }
            }

            if (invoice == null)
            {
                errorMessage = "Invoice not found";
                isLoading = false;
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetInvoiceStatusBadge(string status)
    {
        return status switch
        {
            "Paid" => "badge-success",
            "Unpaid" => "badge-danger",
            "Pending" => "badge-warning",
            "Partial" => "badge-info",
            _ => "badge-secondary"
        };
    }

    private string GetInvoiceStatusTextClass(string status)
    {
        return status switch
        {
            "Paid" => "text-success",
            "Unpaid" => "text-danger",
            "Pending" => "text-warning",
            "Partial" => "text-info",
            _ => "text-secondary"
        };
    }

    private void PayInvoice(int invoiceId)
    {
        Navigation.NavigateTo($"/client/{UserId}/invoices/{invoiceId}/pay");
    }

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
}